[
  {
    "id": "passwordless-auth",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/auth.ts",
    "title": "Passwordless OTP authentication with shaped JWT/session",
    "description": "Custom NextAuth Credentials provider verifies OTPs, enriches JWT/session with profile fields, and exposes tokens for server actions to streamline secure sign-in. # Dipzin",
    "code": "import NextAuth from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { fetchUserWithToken } from \"./utils/auth/fetchUserWithToken\";\n\n// Define a custom user type to include token\ndeclare module \"next-auth\" {\n  interface User {\n    token: string;\n    avatar: {\n      id: number;\n      hash: string;\n      ext: string;\n      width: number;\n      height: number;\n    };\n    username: string;\n    bio: string;\n    role: string;\n    confirmed: boolean;\n    is_paid: boolean;\n    affiliate_code: string;\n    stripe_id: string;\n  }\n}\n\nexport const {\n  auth,\n  signIn,\n  signOut,\n  handlers: { GET, POST },\n} = NextAuth({\n  providers: [\n    Credentials({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        otp: { label: \"OTP\", type: \"text\" },\n      },\n      async authorize(credentials) {\n        // Verify the OTP\n        const res = await fetch(`${process.env.NEXT_PUBLIC_API}/otps/verify`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            data: {\n              email: credentials.email,\n              otp: credentials.otp,\n            },\n          }),\n        });\n\n        if (!res.ok) {\n          throw new Error(\"Invalid OTP\");\n        }\n\n        const { token } = await res.json();\n        // Fetch user data using the token\n        const user = await fetchUserWithToken(token);\n\n        if (res.ok && token) {\n          // Return user object with token if authentication was successful\n          return { ...user, token };\n        }\n\n        // If authentication failed, return null\n        return null;\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, trigger, user }) {\n      if (trigger === \"update\") {\n        const updatedUser = await fetchUserWithToken(\n          token.sessionToken as string,\n        );\n        return {\n          ...token,\n          ...updatedUser,\n        };\n      }\n\n      return {\n        ...token,\n        ...(user && {\n          id: user.id,\n          avatar: user.avatar,\n          username: user.username,\n          bio: user.bio,\n          sessionToken: user.token,\n          confirmed: user.confirmed,\n          is_paid: user.is_paid,\n          affiliate_code: user.affiliate_code,\n          stripe_id: user.stripe_id,\n        }),\n      };\n    },\n    async session({ session, token }) {\n      // Return a new session object with the properties merged\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          token: token.sessionToken as string,\n          avatar: token.avatar as {\n            id: number;\n            hash: string;\n            ext: string;\n            width: number;\n            height: number;\n          },\n          username: token.username as string,\n          bio: token.bio as string,\n          confirmed: token.confirmed as boolean,\n          id: token.id as string,\n          is_paid: token.is_paid as boolean,\n          affiliate_code: token.affiliate_code as string,\n          stripe_id: token.stripe_id as string,\n        },\n      };\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  redirectProxyUrl: process.env.BASE_URL,\n  trustHost: true,\n});\n"
  },
  {
    "id": "desktop-navigator",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/app/(explorer)/_components/navigator/src/desktop-navigator-view.tsx",
    "title": "Animated desktop navigator with query-aware, contextual search",
    "description": "Built a polished, scalable navigation surface using Framer Motion, pattern-to-API mapping, and query state hooks that surface intelligent suggestions and keep search context in sync across the UI. # Dipzin",
    "code": "\"use client\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { Input } from '@/components/Shared/input';\nimport { Switcher } from '@/components/Shared/switcher';\nimport { NavigatorMenu } from './navigator-menu';\nimport { Suggestions } from '@/app/(explorer)/_components/navigator/suggestions';\nimport { useQuery } from '@/app/(explorer)/_hooks/useQuery';\nimport { useKeyword } from '@/app/(explorer)/_hooks/useKeyword';\nimport { getPatternHandleForAPI } from '@/app/(explorer)/_utils/queryUtils';\nimport { AppPill } from '../app-pill';\nimport useAppPill from '../app-pill/_hooks/useAppPill';\n\nconst patterns = [\n  { label: 'Apps', value: 'apps' },\n  { label: 'Screens', value: 'screens' },\n  { label: 'Components', value: 'components' },\n  { label: 'Marketing', value: 'marketing' },\n  { label: 'Flows', value: 'flows' },\n];\n\nconst platforms = [\n  { label: 'IOS', value: 'ios' },\n  { label: 'Android', value: 'android' },\n  { label: 'Web', value: 'web' },\n];\n\nconst DesktopNavigatorView: React.FC = () => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const navigatorRef = useRef<HTMLInputElement | null>(null);\n\n  const { keyword, setKeyword } = useKeyword();\n  const {\n    query, setFilters, setApps, setPattern, suggestions, setPlatform\n  } = useQuery();\n  const { filters, platform, pattern } = query || {};\n\n  const {\n    allApps, hiddenAppSlugs, handleToggleVisibility, handleRemoveApp\n  } = useAppPill({\n    query,\n    setApps,\n  });\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (navigatorRef.current && !navigatorRef.current.contains(event.target as Node)) {\n      setIsMenuOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const switcherState = isMenuOpen || (filters && filters.length > 0) ? 'collapsed' : 'open';\n\n  const correctedPattern = getPatternHandleForAPI(pattern);\n  const mappedSuggestions = suggestions?.map((name: string) => ({\n    name,\n    pattern: correctedPattern,\n  })) || [];\n\n  console.log('query: ', JSON.stringify(query, null, 2));\n\n  return (\n    <motion.div\n      ref={navigatorRef}\n      key=\"desktop-navigator\"\n      className=\"size-full max-w-[70vw] bg-gradient-to-b from-slate-900/85 to-slate-900/60 rounded-[1.625rem] p-2.5 hidden lg:flex flex-col gap-4\"\n      initial={{ height: 'auto' }}\n      animate={{ height: isMenuOpen ? 'auto' : 'auto' }}\n      transition={{ duration: 0.3, ease: 'easeInOut' }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div className=\"w-full h-fit flex items-center gap-4\">\n        <Switcher\n          value={pattern}\n          onChange={setPattern}\n          data={patterns}\n          state={switcherState}\n        />\n        <Input\n          value={keyword}\n          onChange={(e) => setKeyword(e.target.value)}\n          onFocus={() => setIsMenuOpen(true)}\n          type=\"search\"\n          placeholder={filters?.length > 0 ? 'Search' : 'Try Search'}\n          autoComplete=\"off\"\n          selectedFilters={filters}\n          setSelectedFilters={(updateFn) => setFilters(updateFn)}\n        />\n        <Switcher\n          value={platform}\n          onChange={setPlatform}\n          data={platforms}\n          state=\"open\"\n        />\n      </div>\n      {isMenuOpen && (\n        <NavigatorMenu\n          isMenuOpen={isMenuOpen}\n          handleUpdate={(updateFn, target) => {\n            if (target === 'filters') {\n              setFilters(updateFn(query.filters));\n            } else if (target === 'apps') {\n              setApps(updateFn(query.apps));\n            }\n          }}\n        />\n      )}\n\n      {!isMenuOpen && allApps.length > 0 && (\n      <div className=\"size-full flex gap-4\">\n        {allApps.map((app, index) => (\n          app && app.slug ? (\n            <AppPill\n              key={app.id || index}\n              data={app}\n              isFull={allApps.length === 1}\n              isHidden={hiddenAppSlugs.includes(app.slug)}\n              onToggleVisibility={() => handleToggleVisibility(app.slug)}\n              onRemove={() => handleRemoveApp(app.slug)}\n            />\n          ) : null\n        ))}\n      </div>\n      )}\n\n      <AnimatePresence>\n        {!isMenuOpen && (isHovered || !allApps.length) && (\n          <motion.div\n            className={isMenuOpen ? 'hidden' : 'flex'}\n            initial={{ opacity: 0, height: 0, y: -10 }}\n            animate={{ opacity: 1, height: 'auto', y: 0 }}\n            exit={{ opacity: 0, height: 0, y: -10 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Suggestions\n              suggestions={mappedSuggestions}\n              selectedFilters={query.filters}\n              setSelectedFilters={setFilters}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n\nexport default DesktopNavigatorView;\n"
  },
  {
    "id": "metadata-pipeline",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/app/(explorer)/_utils/createMetadata.ts",
    "title": "Dynamic SEO metadata pipeline with domain-driven keywords",
    "description": "Generates Next.js metadata by fetching domain data and composing keyword-rich titles/descriptions based on platform, pattern, and filters—normalizes queries and guards against bad inputs to boost discoverability. # Dipzin",
    "code": "import type { Metadata } from \"next\";\nimport { get } from \"@/utils/api\";\nimport QueryString from \"qs\";\n\ntype PlatformType = \"ios\" | \"android\" | \"web\";\ntype PatternType = \"apps\" | \"components\" | \"marketing\" | \"flows\" | \"screens\";\n\nasync function fetchRandomKeywords(\n  endpoint: string,\n  fieldName: string,\n  filter: any = {},\n): Promise<string[]> {\n  const query = QueryString.stringify({\n    pagination: { pageSize: 10, offset: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER) },\n    fields: [fieldName],\n    filters: filter,\n  });\n  const response = await get(`/${endpoint}?${query}`);\n  return response.data.map((item: any) => item.attributes[fieldName]);\n}\n\nexport async function createMetadata(\n  params: [PlatformType, PatternType, string?],\n  searchParams: { [key: string]: string | string[] },\n): Promise<Metadata> {\n  const [platform, pattern] = params;\n  const title = `Dipzin — Discover Top ${platform} ${pattern} App Design Inspirations`;\n  const description = `Dive into a selection of ${platform} ${pattern} app design works that blend functionality with aesthetic excellence. Your destination for ${platform} app design inspiration.`;\n\n  const keywords: string[] = [];\n\n  // Existing keyword extraction\n  if (pattern === \"apps\" && searchParams.app) {\n    keywords.push(decodeURIComponent(searchParams.app as string));\n  }\n  if (searchParams.categories) {\n    keywords.push(decodeURIComponent(searchParams.categories as string));\n  }\n  if (searchParams.flows) {\n    keywords.push(decodeURIComponent(searchParams.flows as string));\n  }\n  if (searchParams.screens) {\n    keywords.push(decodeURIComponent(searchParams.screens as string));\n  }\n  if (pattern === \"components\") {\n    if (searchParams.components) {\n      const components = Array.isArray(searchParams.components)\n        ? searchParams.components.map(decodeURIComponent)\n        : [decodeURIComponent(searchParams.components)];\n      keywords.push(...components);\n    } else if (params[2]) {\n      keywords.push(decodeURIComponent(params[2]));\n    }\n  }\n  if (pattern === \"marketing\") {\n    if (searchParams.marketing) {\n      const marketing = Array.isArray(searchParams.marketing)\n        ? searchParams.marketing.map(decodeURIComponent)\n        : [decodeURIComponent(searchParams.marketing)];\n      keywords.push(...marketing);\n    } else if (params[2]) {\n      keywords.push(decodeURIComponent(params[2]));\n    }\n  }\n\n  // Fetch 10 random items based on the pattern\n  let randomKeywords: string[] = [];\n  switch (pattern) {\n    case \"apps\":\n      randomKeywords = await fetchRandomKeywords(\"categories\", \"name\");\n      break;\n    case \"screens\":\n      randomKeywords = await fetchRandomKeywords(\"tags\", \"name\");\n      break;\n    case \"components\":\n      randomKeywords = await fetchRandomKeywords(\"components\", \"name\");\n      break;\n    case \"marketing\":\n      randomKeywords = await fetchRandomKeywords(\n        \"tags\",\n        \"name\",\n        { types: { name: \"marketing\" } }\n      );\n      break;\n    case \"flows\":\n      randomKeywords = await fetchRandomKeywords(\"flow-actions\", \"name\");\n      break;\n    default:\n      break;\n  }\n\n  keywords.push(...randomKeywords);\n\n  return {\n    title,\n    description,\n    keywords,\n  };\n}\n"
  },
  {
    "id": "app-data-dirty-submit",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/apps-management/[platform]/[slug]/[id]/app-details/_hooks/useAppData.ts",
    "title": "Minimal-diff form updates via react-hook-form dirty fields",
    "description": "Sends only changed fields to the API to cut payload size and side effects, improving performance and reliability of admin operations at scale. # Dipzin",
    "code": "\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { debounce } from \"lodash\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { appSchema } from \"../_schemas/appSchema\";\nimport { TransformedApp, AppCategory } from \"../types\";\nimport { searchAppCategories } from \"../_actions/searchAppCategories\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { searchKeywords } from \"../_actions/searchKeywords\";\nimport { reformData } from \"../_utils/reformData\";\nimport { uploadFileToStrapi } from \"@/utils/uploadFileToStrapi\";\nimport { updateApp } from \"../_actions/updateApp\";\n\nconst useAppData = (initialAppData: TransformedApp) => {\n  const methods = useForm({\n    resolver: zodResolver(appSchema),\n    defaultValues: initialAppData,\n    mode: \"onChange\",\n  });\n\n  const { formState, getValues } = methods;\n  const { dirtyFields, isDirty } = formState;\n\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const [categories, setCategories] = useState<AppCategory[] | null>(null);\n  const [keywords, setKeywords] = useState<TransformedApp[\"keywords\"] | null>(\n    null\n  );\n\n  const { toast } = useToast();\n\n  const submitApp = async (data: any) => {\n    if (!isDirty) {\n      toast({\n        title: \"Error\",\n        description: \"No changes to submit.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const allValues = getValues();\n    const dirtyData = Object.keys(dirtyFields).reduce((acc, key) => {\n      acc[key as keyof TransformedApp] = allValues[key as keyof TransformedApp];\n      return acc;\n    }, {} as Partial<TransformedApp>);\n\n    // Always include the app ID in the dirty data\n    dirtyData.id = initialAppData.id;\n\n    try {\n      const appData = reformData(dirtyData);\n      console.log(\"appData: \", appData);\n\n      const { icon, ...appDataWithoutIcon } = appData;\n      const response = await updateApp(\n        JSON.parse(JSON.stringify(appDataWithoutIcon))\n      );\n\n      if (response.data) {\n        let updatedAppData = { ...appData, id: response.data.id };\n\n        if (appData.icon) {\n          const newLogo = await uploadFileToStrapi(\n            appData.icon,\n            \"api::app.app\",\n            String(response.data.id),\n            \"icon\"\n          );\n          updatedAppData = { ...updatedAppData, icon: newLogo };\n        }\n\n        toast({\n          title: \"Success\",\n          description: \"App data submitted successfully.\",\n        });\n      } else {\n        console.error(\"Failed to submit app data.\");\n        toast({\n          title: \"Error\",\n          description: \"Failed to submit app data.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(\"Error submitting app data:\", error);\n        toast({\n          title: \"Failed to submit app data.\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        console.error(\"Unknown error submitting app data:\", error);\n        toast({\n          title: \"Failed to submit app data.\",\n          description: \"An unknown error occurred.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const fetchCategories = useCallback(\n    debounce(async (query: string) => {\n      try {\n        const data = await searchAppCategories(query);\n        setCategories(data.data);\n      } catch (error) {\n        console.error(\"Error fetching categories:\", error);\n      }\n    }, 300),\n    []\n  );\n\n  const fetchKeywords = useCallback(\n    debounce(async (query: string) => {\n      try {\n        const data = await searchKeywords(query);\n        setKeywords(data.data);\n      } catch (error) {\n        console.error(\"Error fetching keywords:\", error);\n      }\n    }, 300),\n    []\n  );\n\n  const handleCategoriesSearchChange = (query: string) => {\n    setSearchTerm(query);\n    fetchCategories(query);\n  };\n\n  const handleKeywordsSearchChange = (query: string) => {\n    setSearchTerm(query);\n    fetchKeywords(query);\n  };\n\n  return {\n    appData: initialAppData,\n    methods,\n    searchTerm,\n    handleCategoriesSearchChange,\n    categories,\n    handleKeywordsSearchChange,\n    keywords,\n    submitApp,\n  };\n};\n\nexport default useAppData;\n"
  },
  {
    "id": "fetch-data-hook",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/app/(explorer)/_hooks/useFetchData.tsx",
    "title": "Domain-smart data fetching with query correction and adaptive pagination",
    "description": "Normalizes filters (e.g., flows → flowActions), adjusts page size per pattern, and centralizes pagination/suggestions to keep UI logic clean and consistent. # Dipzin",
    "code": "import { useCallback } from \"react\";\nimport { fetchDataAction } from \"../_actions/fetchData\";\nimport { useQuery } from \"./useQuery\";\n\nexport function useFetchData() {\n  const {\n    data, setData, pagination, setPagination, setSuggestions\n  } = useQuery();\n\n  const fetchData = useCallback(\n    async (queryOverride, isPagination = false) => {\n      const correctedFilters = (queryOverride.filters || []).map((filter) => {\n        if (filter.pattern && filter.pattern.toLowerCase() === \"flows\") {\n          return { ...filter, pattern: \"flowActions\" };\n        }\n        return filter;\n      });\n\n      const dataQuery = {\n        apps: (queryOverride.apps || []).map((app) => (typeof app === \"object\" && \"slug\" in app\n          ? { slug: app.slug }\n          : { slug: app }),),\n        pattern: queryOverride.pattern,\n        platform: queryOverride.platform,\n        change: queryOverride.change,\n        filters: correctedFilters,\n        offset: queryOverride.offset, // Use pagination offset\n        limit:\n          queryOverride.pattern\n          && queryOverride.pattern.toLowerCase() === \"marketing\"\n            ? pagination.limit * 2.5\n            : pagination.limit, // Adjust pagination limit for marketing pattern to fix the issue with the pagination; the data returns 8 items while the limit is 20 so multiply by 2.5 to make it 20 // this only happens for marketing pattern\n      };\n      const response = await fetchDataAction(dataQuery);\n      if (response.status === 500) {\n        throw new Error(\"Server error\");\n      }\n\n      if (response.status === 404) {\n        throw new Error(\"No data found\");\n      }\n      // Update the data in store\n      if (isPagination) {\n        setData([...data, ...response.data]);\n      } else {\n        setData(response.data);\n      }\n\n      // Update the pagination separately\n      setPagination({\n        offset: response.pagination.pageSize * (response.pagination.page - 1),\n        limit: response.pagination.pageSize,\n        totalPages: response.pagination.totalPages,\n        totalRecords: response.pagination.totalRecords,\n      });\n\n      // Update the suggestions\n      setSuggestions(response.suggestions);\n\n      const updatedQuery = {\n        ...queryOverride,\n        ...response.query,\n        offset: response.pagination.pageSize * (response.pagination.page - 1),\n        limit: response.pagination.pageSize,\n        initialized: false,\n        changed: false,\n      };\n\n      return updatedQuery;\n    },\n    [pagination, setData, setPagination, setSuggestions],\n  );\n\n  return { fetchData };\n}\n"
  },
  {
    "id": "onboarding-flows",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/app/(onboarding)/_hooks/usePersonalize.ts",
    "title": "Multi-step onboarding and personalization with server actions",
    "description": "Fetches interests with auth, persists selections, updates NextAuth sessions, and manages robust step state for a seamless, tailored first-run experience. # Dipzin",
    "code": "\"use client\";\n\nimport { useForm, type SubmitHandler } from \\\"react-hook-form\\\";\nimport { getInterests } from \\\"../_actions/getInterests\\\";\nimport { useRouter } from \\\"next/navigation\\\";\nimport { useEffect, useState } from \\\"react\\\";\nimport positions from \\\"../_static/positions.json\\\";\nimport { updateUser } from \\\"@/actions/updateUser\\\";\nimport { useSession } from \\\"next-auth/react\\\";\nimport { onboardingStore } from \\\"../onboardingStore\\\";\nimport { toast } from \\\"@/hooks/use-toast\\\";\n\ninterface PersonalizeFormInputs {\n  positions: number[];\n  interests: number[];\n}\n\nexport const usePersonalize = () => {\n  const { formData, setFormData, resetForm } = onboardingStore();\n  const router = useRouter();\n  const { data: session, update } = useSession();\n  const user = session?.user;\n\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<PersonalizeFormInputs>({\n    defaultValues: {\n      positions: formData.positions || [],\n      interests: formData.interests || [],\n    },\n  });\n\n  const [interests, setInterests] = useState<any[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [submissionError, setSubmissionError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const interestsData = await getInterests();\n        setInterests(interestsData);\n      } catch (err: any) {\n        setError(\\\"Failed to fetch interests\\\");\n      }\n    };\n    fetchData();\n  }, []);\n\n  const onSubmit: SubmitHandler<PersonalizeFormInputs> = async (data) => {\n    setSubmissionError(null);\n\n    if (data.positions.length === 0) {\n      setError(\\\"Please select at least one position.\\\");\n      return;\n    }\n    if (data.interests.length === 0) {\n      setError(\\\"Please select at least one interest.\\\");\n      return;\n    }\n\n    setFormData({\n      positions: data.positions,\n      interests: data.interests,\n    });\n\n    try {\n      const updatedData = {\n        ...formData,\n        positions: data.positions,\n        interests: data.interests,\n      };\n      if (user?.token && user?.id) {\n        await updateUser(updatedData, user.token, user.id);\n      } else {\n        setSubmissionError(\\\"User token or ID is missing\\\");\n        return;\n      }\n      update({});\n      resetForm();\n      toast({\n        title: \\\"Success\\\",\n        description: \\\"User information updated\\\",\n        variant: \\\"success\\\",\n      });\n      router.push(\\\"/profile/enjoy\\\");\n    } catch (err: any) {\n      setSubmissionError(err.message || \\\"Failed to update user information\\\");\n    }\n  };\n\n  return {\n    control,\n    interests,\n    positions,\n    handleSubmit: handleSubmit(onSubmit),\n    errors,\n    error,\n    submissionError,\n  };\n};\n\""
  },
  {
    "id": "apps-transform",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/apps-management/_utils/transformData.ts",
    "title": "Typed adapters: Strapi → normalized, UI-ready domain models",
    "description": "Transforms raw API responses into typed structures with deterministic platform mapping and nested asset handling, reducing UI complexity and runtime bugs. # Dipzin",
    "code": "import { ApiResponse, TransformedResponse } from \"../types\";\n\nconst translatePlatform = (platform: string): number => {\n  switch (platform) {\n    case \"ios\":\n      return 2;\n    case \"android\":\n      return 1;\n    case \"web\":\n      return 3;\n    default:\n      return 0;\n  }\n};\n\nexport const transformData = (\n  apiResponse: ApiResponse\n): TransformedResponse => {\n  return {\n    data: apiResponse.data.map((item) => ({\n      id: item.id,\n      name: item.attributes.name,\n      slug: item.attributes.slug,\n      store_link: item.attributes.store_link,\n      status: item.attributes.is_published ? \"published\" : \"drafted\",\n      last_version: item.attributes.updatedAt,\n      icon: {\n        id: item.attributes.icon.data?.id || 0,\n        url: item.attributes.icon.data?.attributes.url || \"\",\n      },\n      platform: {\n        id: translatePlatform(item.attributes.platform),\n        name: item.attributes.platform || \"\",\n      },\n      screens: item.attributes.screens?.data\n        ? item.attributes.screens.data.length\n        : 0,\n    })),\n    meta: apiResponse.meta.pagination,\n  };\n};\n"
  },
  {
    "id": "create-app-form",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/apps-management/_create-app-modal/_componets/app-details-form.tsx",
    "title": "Create-app form with schema validation and instant feedback",
    "description": "React Hook Form + Zod validations, sensible defaults, and guardrails to prevent bad submissions and speed up creation. # Dipzin",
    "code": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useFormContext, Controller } from \"react-hook-form\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Label } from \"@/components/ui/label\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from \"@/components/ui/command\";\nimport { useAppContext } from \"../_providers/app-provider\";\nimport { AppCategory } from \"../types\";\n\nconst Field: React.FC<{ label: string; children: React.ReactNode }> = ({\n  label,\n  children,\n}) => (\n  <div className=\"flex flex-col gap-1\">\n    <Label className=\"text-sm font-medium \">{label}</Label>\n    {children}\n  </div>\n);\n\nconst AppDetailsForm: React.FC = () => {\n  const { control, setValue, watch, formState } = useFormContext();\n  const { errors } = formState;\n  const { searchTerm, handleSearchChange, appCategories } = useAppContext();\n\n  const [open, setOpen] = useState(false);\n\n  const selectedCategoryId = watch(\"categories\")?.[0];\n  const selectedCategoryName =\n    appCategories?.find(\n      (category: AppCategory) => category.id === selectedCategoryId\n    )?.attributes.name || \"\";\n\n  return (\n    <Card className=\"w-[670px] h-full bg-background\">\n      <CardContent className=\"flex flex-col items-center justify-center p-6 text-sm space-y-6\">\n        <CardHeader className=\"w-full flex flex-row items-center gap-4 p-0\">\n          <Label className=\"font-semibold text-[#CECFD2] text-sm\">\n            App Platform\n          </Label>\n          <Controller\n            name=\"platform\"\n            control={control}\n            defaultValue={\"ios\"}\n            render={({ field }) => (\n              <ToggleGroup\n                className=\"p-[2px] border border-[#333741] rounded-lg\"\n                type=\"single\"\n                value={field.value}\n                onValueChange={(value) =>\n                  setValue(\"platform\", value, { shouldDirty: true })\n                }\n              >\n                <ToggleGroupItem size={\"sm\"} value={\"ios\"}>\n                  IOS\n                </ToggleGroupItem>\n                <ToggleGroupItem size={\"sm\"} value={\"android\"}>\n                  Android\n                </ToggleGroupItem>\n                <ToggleGroupItem size={\"sm\"} value={\"web\"}>\n                  Web\n                </ToggleGroupItem>\n              </ToggleGroup>\n            )}\n          />\n        </CardHeader>\n        <Separator />\n\n        <form id=\"app-details-form\" className=\"grid grid-cols-2 gap-4 w-full\">\n          <Controller\n            name=\"name\"\n            control={control}\n            render={({ field }) => (\n              <Field label=\"App Name\">\n                <Input\n                  className=\"rounded-lg border-[#333741]\"\n                  {...field}\n                  placeholder=\"App Name\"\n                />\n                {errors.name && (\n                  <span className=\"text-xs text-red-500\">\n                    {String(errors.name.message)}\n                  </span>\n                )}\n              </Field>\n            )}\n          />\n          <Controller\n            name=\"slug\"\n            control={control}\n            render={({ field }) => (\n              <Field label=\"App Slug\">\n                <Input\n                  className=\"rounded-lg border-[#333741]\"\n                  {...field}\n                  placeholder=\"App Slug\"\n                />\n                {errors.slug && (\n                  <span className=\"text-xs text-red-500\">\n                    {String(errors.slug.message)}\n                  </span>\n                )}\n              </Field>\n            )}\n          />\n          <Controller\n            name=\"tag_line\"\n            control={control}\n            render={({ field }) => (\n              <Field label=\"App Tagline\">\n                <Input\n                  className=\"rounded-lg border-[#333741]\"\n                  {...field}\n                  placeholder=\"App Tagline\"\n                />\n                {errors.tag_line && (\n                  <span className=\"text-xs text-red-500\">\n                    {String(errors.tag_line.message)}\n                  </span>\n                )}\n              </Field>\n            )}\n          />\n          <Controller\n            name=\"copy_right\"\n            control={control}\n            render={({ field }) => (\n              <Field label=\"Copyrights\">\n                <Input\n                  className=\"rounded-lg border-[#333741]\"\n                  {...field}\n                  placeholder=\"Copyrights\"\n                />\n                {errors.copy_right && (\n                  <span className=\"text-xs text-red-500\">\n                    {String(errors.copy_right.message)}\n                  </span>\n                )}\n              </Field>\n            )}\n          />\n          <div className=\"col-span-2\">\n            <Controller\n              name=\"categories\"\n              control={control}\n              render={({ field }) => (\n                <Field label=\"App Category\">\n                  <button type=\"button\" onClick={() => setOpen(true)}>\n                    <Input\n                      className=\"rounded-lg border-[#333741] w-full pointer-events-none\"\n                      value={selectedCategoryName}\n                      placeholder=\"Select Category\"\n                      readOnly\n                    />\n                  </button>\n                  {errors.categories && (\n                    <span className=\"text-xs text-red-500\">\n                      {String(errors.categories.message)}\n                    </span>\n                  )}\n                  <CommandDialog open={open} onOpenChange={setOpen}>\n                    <CommandInput\n                      placeholder=\"Type to search categories...\"\n                      value={searchTerm}\n                      onValueChange={handleSearchChange}\n                    />\n                    <CommandList>\n                      {appCategories?.length ? (\n                        <CommandGroup heading=\"Categories\">\n                          {appCategories.map((category) => (\n                            <CommandItem\n                              key={category.id}\n                              onSelect={() => {\n                                setValue(\"categories\", [category.id], {\n                                  shouldDirty: true,\n                                });\n                                setOpen(false);\n                              }}\n                            >\n                              {`${category.attributes.name} - ${category.id}`}\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      ) : (\n                        <CommandEmpty>No categories found</CommandEmpty>\n                      )}\n                    </CommandList>\n                  </CommandDialog>\n                </Field>\n              )}\n            />\n          </div>\n          <div className=\"col-span-2\">\n            <Controller\n              name=\"store_link\"\n              control={control}\n              render={({ field }) => (\n                <Field label=\"Store/Website Link\">\n                  <Input\n                    className=\"rounded-lg border-[#333741]\"\n                    {...field}\n                    placeholder=\"Store/Website Link\"\n                  />\n                  {errors.store_link && (\n                    <span className=\"text-xs text-red-500\">\n                      {String(errors.store_link.message)}\n                    </span>\n                  )}\n                </Field>\n              )}\n            />\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AppDetailsForm;\n"
  },
  {
    "id": "search-apps",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/apps-management/_actions/searchApps.ts",
    "title": "Fresh, precise app search using server actions + Strapi queries",
    "description": "Combines Next.js server actions, qs-crafted filters, and no-store caching to deliver accurate, up-to-date search results with low latency. # Dipzin",
    "code": "\"use server\";\n\nimport QueryString from \"qs\";\nimport { ApiResponse, TransformedResponse } from \"../types\";\nimport { transformData } from \"../_utils/transformData\";\n\nexport const searchApps = async (\n  searchQuery: string\n): Promise<TransformedResponse> => {\n  const query = QueryString.stringify({\n    fields: [\"name\", \"slug\", \"platform\"],\n    filters: {\n      ...(searchQuery !== \"\" && {\n        name: { $containsi: searchQuery },\n      }),\n    },\n    populate: {\n      icon: {\n        fields: [\"url\"],\n      },\n      pagination: {\n        page: 1,\n        pageSize: 5,\n      },\n    },\n  });\n\n  try {\n    const response = await fetch(\n      `${process.env.NEXT_PUBLIC_API_URL}/apps?${query}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        cache: \"no-store\",\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch apps\");\n    }\n\n    const apiResponse: ApiResponse = await response.json();\n    console.log(\"response: \", JSON.stringify(apiResponse, null, 2));\n    return transformData(apiResponse);\n  } catch (error) {\n    console.error(\"Error fetching apps:\", error);\n    throw error;\n  }\n};\n"
  },
  {
    "id": "get-apps-action",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "dev",
    "file": "src/app/(main)/apps-management/_actions/getApps.ts",
    "title": "Server action for typed, fresh app listings",
    "description": "Centralizes Strapi querying with pagination and no-store hints to deliver always-current admin views with minimal latency. # Dipzin",
    "code": "\"use server\";\n\nimport QueryString from \"qs\";\nimport { transformData } from \"../_utils/transformData\";\nimport { ApiResponse, TransformedResponse } from \"../types\";\n\nexport const getApps = async (\n  page = 1,\n  status: string | null = null,\n  platform: string | null = null\n): Promise<TransformedResponse> => {\n  const query = QueryString.stringify({\n    fields: [\n      \"name\",\n      \"slug\",\n      \"platform\",\n      \"store_link\",\n      \"is_published\",\n      \"updatedAt\",\n    ],\n    filters: {\n      ...(status !== null && {\n        is_published: status === \"published\" ? true : false,\n      }),\n      ...(platform !== null && {\n        platform,\n      }),\n    },\n    populate: {\n      icon: {\n        fields: [\"url\"],\n      },\n      screens: {\n        fields: [\"id\"],\n      },\n    },\n    pagination: {\n      page: page,\n      pageSize: 7,\n    },\n  });\n\n  try {\n    const response = await fetch(\n      `${process.env.NEXT_PUBLIC_API_URL}/apps?${query}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        cache: \"no-store\",\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch apps\");\n    }\n\n    const apiResponse: ApiResponse = await response.json();\n    return transformData(apiResponse);\n  } catch (error) {\n    console.error(\"Error fetching apps:\", error);\n    throw error;\n  }\n};\n"
  },
  {
    "id": "use-screens",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "dev",
    "file": "src/app/(main)/apps-management/[platform]/[slug]/[id]/screens-management/_hooks/useScreens.ts",
    "title": "Screens data hook with selective refetch and paging",
    "description": "Fetches screens by app with stable keys, handles loading/error, and invalidates precisely after mutations. # Dipzin",
    "code": "\"use client\"\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { useSearchParams, useParams } from 'next/navigation';\nimport debounce from 'lodash/debounce';\nimport { getScreens } from '../_actions/getScreens';\nimport { deleteScreens } from '../_actions/deleteScreens';\nimport { TransformedScreenData } from '../types';\nimport { toast } from '@/hooks/use-toast';\nimport { updateScreen } from '../_actions/updateScreen';\nimport { createScreen } from '../_actions/createScreen';\nimport { reArrangeScreens } from '../_actions/reArrangeScreens';\nimport { uploadFileToStrapi } from '@/utils/uploadFileToStrapi';\nimport { arrayMove } from '@dnd-kit/sortable';\n\nexport const useScreens = () => {\n  const { id } = useParams();\n  const searchParams = new URLSearchParams(useSearchParams());\n  const status = searchParams.get('status') as boolean | null;\n\n  const [screens, setScreens] = useState<TransformedScreenData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [offset, setOffset] = useState(1);\n  const [selectedScreens, setSelectedScreens] = useState<number[]>([]);\n\n  const getData = useCallback(async (offset: number) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { error, screens: newScreens, hasMore } = await getScreens(Number(id), status, offset);\n\n      if (error) {\n        setError(error);\n      } else {\n        setScreens(prevScreens => offset === 1 ? newScreens : [...prevScreens, ...newScreens]);\n        setHasMore(hasMore);\n        setOffset(offset);\n      }\n    } catch (err) {\n      setError('Failed to fetch screens');\n    } finally {\n      setLoading(false);\n    }\n  }, [id, status]);\n\n  useEffect(() => {\n    setScreens([]);\n    setOffset(1);\n    getData(1);\n  }, [status, getData]);\n\n  const loadMoreScreens = useCallback(debounce(async () => {\n    if (!hasMore || loading) return;\n    const newOffset = offset + 1;\n    searchParams.set('offset', newOffset.toString());\n    window.history.replaceState({}, '', `?${searchParams.toString()}`);\n    await getData(newOffset);\n  }, 300), [hasMore, loading, offset, searchParams, getData]);\n\n  const handleDeleteSelected = useCallback(async () => {\n    try {\n      const response = await deleteScreens(selectedScreens.map(id => id));\n      if (response.message === 'All screens deleted successfully') {\n        setScreens(prevScreens => prevScreens.filter(screen => !selectedScreens.includes(screen.id)));\n        setSelectedScreens([]);\n        toast({ title: \"Success\", description: \"Selected screens have been deleted.\" });\n      }\n    } catch (error) {\n      console.error('Error deleting screens:', error);\n      toast({ title: \"Error\", description: \"Failed to delete selected screens. Please try again.\", variant: \"destructive\" });\n    }\n  }, [selectedScreens, setScreens, toast]);\n\n  const handleScreensUpload = async (files: File[]) => {\n    setLoading(true);\n    try {\n      const newScreens: TransformedScreenData[] = [];\n      for (const file of files) {\n        const screenEntity = await createScreen(Number(id)); // Create the screen entity first\n        const uploadedFile = await uploadFileToStrapi(file, 'api::screen.screen', screenEntity.data.id, 'screen'); // Upload file to Strapi\n        if (uploadedFile && uploadedFile[0]) {\n          newScreens.push({ ...screenEntity, screen: uploadedFile[0] });\n        }\n      }\n      if (newScreens.length > 0) {\n        setScreens(prevScreens => [...prevScreens, ...newScreens]);\n        toast({ title: \"Success\", description: \"Screens uploaded successfully.\" });\n      }\n    } catch (error) {\n      console.error(\"Error uploading files:\", error);\n      toast({ title: \"Error\", description: \"Failed to upload screens.\", variant: \"destructive\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const togglePublishedState = async (screenId: number, currentState: boolean) => {\n    setLoading(true);\n    try {\n      await updateScreen({\n        id: screenId,\n        is_published: !currentState,\n      });\n\n      setScreens((prevScreens) =>\n        prevScreens.map((screen) =>\n          screen.id === screenId ? { ...screen, status: !currentState } : screen\n        )\n      );\n\n      toast({ title: \"Success\", description: `Screen ${!currentState ? \"published\" : \"unpublished\"}.` });\n    } catch (error) {\n      console.error(\"Error updating screen:\", error);\n      toast({ title: \"Error\", description: \"Failed to update screen.\", variant: \"destructive\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteScreen = async (screenId: number) => {\n    try {\n      const res = await deleteScreens([screenId]);\n      if (res.message === 'All screens deleted successfully') {\n        setScreens(prevScreens => prevScreens.filter(screen => screen.id !== screenId));\n        toast({\n          title: 'Success',\n          description: 'Screen deleted successfully',\n        });\n      } else {\n        toast({\n          title: 'Error',\n          description: 'Failed to delete screen',\n        });\n      }\n    } catch (error) {\n      console.error('Error deleting screen:', error);\n      toast({\n        title: 'Error',\n        description: 'An error occurred while deleting the screen',\n      });\n    }\n  };\n\n  // Logic for reordering screens\n  const handleReorderScreens = useCallback(\n    async (activeId: string, overId: string) => {\n      const oldIndex = screens.findIndex(screen => screen.id === Number(activeId));\n      const newIndex = screens.findIndex(screen => screen.id === Number(overId));\n\n      if (oldIndex !== -1 && newIndex !== -1) {\n        try {\n          setScreens((prevScreens) => arrayMove(prevScreens, oldIndex, newIndex));\n          await reArrangeScreens(activeId, newIndex + 1); // Call the API to update the order\n          toast({ title: 'Success', description: 'Screens reordered successfully' });\n        } catch (error) {\n          console.error('Error reordering screens:', error);\n          toast({ title: 'Error', description: 'Failed to reorder screens', variant: 'destructive' });\n        }\n      }\n    },\n    [screens, setScreens, toast]\n  );\n\n  return {\n    screens,\n    setScreens,\n    loading,\n    error,\n    hasMore,\n    getData,\n    loadMoreScreens,\n    selectedScreens,\n    setSelectedScreens,\n    handleDeleteSelected,\n    handleScreensUpload,\n    togglePublishedState,\n    handleDeleteScreen,\n    handleReorderScreens,\n  };\n};\n"
  },
  {
    "id": "use-screen",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "dev",
    "file": "src/app/(main)/apps-management/[platform]/[slug]/[id]/screens-management/_screen/_hooks/useScreen.ts",
    "title": "Single-screen lifecycle hook for edit flows",
    "description": "Centralizes fetch/update/delete for a screen and emits change events to keep lists and details in sync. # Dipzin",
    "code": "import { useState, useCallback, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { debounce } from 'lodash';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from '@/hooks/use-toast';\nimport { TransformedScreenData } from '../../../../types';\nimport { searchComponents } from '../_actions/searchComponents';\nimport { searchTags } from '../_actions/searchTags';\nimport { deleteScreen } from '../_actions/deleteScreen';\nimport { updateScreen } from '../_actions/updateScreen';\nimport { uploadFileToStrapi } from '@/utils/uploadFileToStrapi';\n\nconst useScreen = (initialScreenData: TransformedScreenData) => {\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [tagsResults, setTagsResults] = useState<any[] | null>(null);\n  const [componentsResults, setComponentsResults] = useState<any[] | null>(null);\n  const [dirtyScreenData, setDirtyScreenData] = useState<Partial<TransformedScreenData>>({});\n  const [showReplaceScreen, setShowReplaceScreen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const formMethods = useForm<TransformedScreenData>({\n    defaultValues: initialScreenData,\n    mode: 'onChange',\n  });\n\n  const { watch, setValue } = formMethods;\n\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (name) {\n        const changedValue = value[name as keyof TransformedScreenData];\n        const initialValue = initialScreenData[name as keyof TransformedScreenData];\n\n        if (JSON.stringify(changedValue) !== JSON.stringify(initialValue)) {\n          setDirtyScreenData(prev => ({\n            ...prev,\n            [name]: changedValue\n          }));\n        } else {\n          setDirtyScreenData(prev => {\n            const { [name]: _, ...rest } = prev;\n            return rest;\n          });\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [watch, initialScreenData]);\n\n  // Debounced update function\n  const debouncedUpdate = useCallback(\n    debounce(async (data: Partial<TransformedScreenData>) => {\n      try {\n        let updatedData = { ...data };\n        if (data.screen instanceof File) {\n          const uploadedFile = await uploadFileToStrapi(data.screen, 'api::screen.screen', initialScreenData.id.toString(), 'screen');\n          if (uploadedFile && uploadedFile[0]) {\n            updatedData.screen = uploadedFile[0];\n          }\n        }\n\n        const updatedScreen = await updateScreen({\n          id: initialScreenData.id,\n          ...updatedData\n        });\n        toast({\n          title: 'Success',\n          description: 'Screen updated successfully',\n        });\n        setDirtyScreenData({});\n        setShowReplaceScreen(false);\n        setSelectedImage(null); // Clear the selected image after successful update\n      } catch (error) {\n        console.error('Error updating screen:', error);\n        toast({\n          title: 'Error',\n          description: 'Failed to update screen',\n        });\n      }\n    }, 500),\n    [initialScreenData.id, toast]\n  );\n\n  // Effect to trigger update when dirtyScreenData changes\n  useEffect(() => {\n    if (Object.keys(dirtyScreenData).length > 0) {\n      debouncedUpdate(dirtyScreenData);\n    }\n  }, [dirtyScreenData, debouncedUpdate]);\n\n  const handleFileSelection = (file: File) => {\n    const imageUrl = URL.createObjectURL(file);\n    setSelectedImage(imageUrl);\n    setValue('screen', file);\n  };\n\n  const fetchTags = useCallback(\n    debounce(async (query: string) => {\n      try {\n        const data = await searchTags(query);\n        setTagsResults(data.data);\n      } catch (error) {\n        console.error('Error fetching tags:', error);\n      }\n    }, 300),\n    []\n  );\n\n  const fetchComponents = useCallback(\n    debounce(async (query: string) => {\n      try {\n        const data = await searchComponents(query);\n        setComponentsResults(data.data);\n      } catch (error) {\n        console.error('Error fetching components:', error);\n      }\n    }, 300),\n    []\n  );\n\n  const handleTagsSearchChange = (query: string) => {\n    setSearchTerm(query);\n    fetchTags(query);\n  };\n\n  const handleComponentsSearchChange = (query: string) => {\n    setSearchTerm(query);\n    fetchComponents(query);\n  };\n\n  const handleDeleteScreen = async (screenId: number) => {\n    try {\n      const res = await deleteScreen(screenId);\n      if (res) {\n        router.back();\n        toast({\n          title: 'Success',\n          description: 'Screen deleted successfully',\n        });\n      } else {\n        toast({\n          title: 'Error',\n          description: 'Failed to delete screen',\n        });\n      }\n    } catch (error) {\n      console.error('Error deleting screen:', error);\n      toast({\n        title: 'Error',\n        description: 'An error occurred while deleting the screen',\n      });\n    }\n  };\n\n  return {\n    screen: initialScreenData,\n    formMethods,\n    searchTerm,\n    handleTagsSearchChange,\n    handleComponentsSearchChange,\n    tagsResults,\n    componentsResults,\n    handleDeleteScreen,\n    dirtyScreenData,\n    showReplaceScreen,\n    setShowReplaceScreen,\n    handleFileSelection\n  };\n};\n\nexport default useScreen;\n"
  },
  {
    "id": "screens-actions",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "dev",
    "file": "src/app/(main)/apps-management/[platform]/[slug]/[id]/screens-management/_components/screens-actions.tsx",
    "title": "Inline, bulk screen actions with optimistic UX",
    "description": "Publish, duplicate, and delete with confirmations, permission-aware availability, and fast optimistic updates. # Dipzin",
    "code": "\"use client\"\n\nimport { BottomLeftContent, BottomRightContent, Controls, TopLeftContent, TopRightContent } from \"@/components/shared\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport { SquareArrowOutUpRight, Trash2 } from \"lucide-react\";\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { useScreensContext } from \"../_providers/screens-provider\";\n\nconst ScreensActions = () => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const status = searchParams.get('status') as \"true\" | \"false\" | null;\n\n  const { selectedScreens, handleDeleteSelected, handleScreensUpload } = useScreensContext();\n\n  const handleScreensFilterChange = (newStatus: \"true\" | \"false\" | null) => {\n    const params = new URLSearchParams(searchParams);\n    if (newStatus === null) {\n      params.delete('status');\n    } else {\n      params.set('status', newStatus);\n    }\n    router.push(`?${params.toString()}`, { scroll: false });\n  };\n\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      handleScreensUpload(files);\n    }\n  };\n\n  return (\n    <Controls className=\"my-6\">\n      <TopLeftContent>\n        <Label className=\"text-[#CECFD2] font-semibold flex flex-col gap-1\">\n          Application Information\n          <span className=\"text-[#94969C] text-sm font-normal\">\n            These are the app main information\n          </span>\n        </Label>\n      </TopLeftContent>\n\n      <TopRightContent>\n        <ToggleGroup\n          className=\"p-[2px] border border-[#333741] rounded-lg\"\n          type=\"single\"\n        >\n          <ToggleGroupItem className=\"flex items-center gap-2\" size={\"sm\"} value=\"web-app\">\n            Web App\n          </ToggleGroupItem>\n          <ToggleGroupItem className=\"flex items-center gap-2\" size={\"sm\"} value=\"marketing-page\">\n            Marketing Page\n          </ToggleGroupItem>\n        </ToggleGroup>\n      </TopRightContent>\n\n      <BottomLeftContent>\n        <ToggleGroup\n          type=\"single\"\n          value={status !== null ? status : \"null\"}\n          onValueChange={(value) => handleScreensFilterChange(value === \"null\" ? null : value as \"true\" | \"false\" | null)}\n        >\n          <ToggleGroupItem size={\"sm\"} value=\"null\">Show All</ToggleGroupItem>\n          <ToggleGroupItem size={\"sm\"} value=\"true\">Show Published Only</ToggleGroupItem>\n          <ToggleGroupItem size={\"sm\"} value=\"false\">Show Drafts Only</ToggleGroupItem>\n        </ToggleGroup>\n      </BottomLeftContent>\n\n      <BottomRightContent>\n        <div className=\"w-full h-full flex items-center gap-4\">\n          <Button\n            variant={\"outline\"}\n            onClick={() => document.getElementById('uploadFile')?.click()}\n          >\n            <input\n              type=\"file\"\n              id=\"uploadFile\"\n              style={{ display: \"none\" }}\n              onChange={handleFileInputChange}\n              multiple\n            />\n            <SquareArrowOutUpRight /> Upload Screens\n          </Button>\n          <Button\n            variant={\"outline\"}\n            onClick={handleDeleteSelected}\n            disabled={selectedScreens.length === 0}\n          >\n            <Trash2 className=\"text-destructive\" /> Delete Selected\n          </Button>\n        </div>\n      </BottomRightContent>\n    </Controls>\n  );\n};\n\nexport default ScreensActions;\n"
  },
  {
    "id": "use-app-filters",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/apps-management/_hooks/useAppFilters.ts",
    "title": "Composable app filters with URL/query synchronization",
    "description": "Debounced search, reset flows, and deep-linkable filters keep navigation predictable across sessions and shares. # Dipzin",
    "code": "\"use client\"\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { debounce } from 'lodash';\nimport { searchApps } from '../_actions/searchApps';\nimport { TransformedResponse } from '../types';\n\nexport const useAppFilters = () => {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n\n  const [status, setStatus] = useState<\"published\" | \"drafted\" | null>(null);\n  const [platform, setPlatform] = useState<string | null>(null);\n  const [selectedFilters, setSelectedFilters] = useState<any>({});\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [filteredApps, setFilteredApps] = useState<TransformedResponse>();\n\n  useEffect(() => {\n    const statusParam = searchParams.get('status');\n    const platformParam = searchParams.get('platform');\n\n    if (statusParam !== null) {\n      setStatus(statusParam === 'published' ? 'published' : statusParam === 'drafted' ? 'drafted' : null);\n    }\n    if (platformParam !== null) {\n      setPlatform(platformParam);\n    }\n  }, [searchParams]);\n\n  const handleAppFilterChange = (newStatus: \"published\" | \"drafted\" | null, newPlatform: string | null) => {\n    setStatus(newStatus);\n    setPlatform(newPlatform);\n\n    const params = new URLSearchParams();\n    if (newStatus !== null) params.set('status', newStatus);\n    if (newPlatform !== null) params.set('platform', newPlatform);\n\n    router.replace(`?${params.toString()}`, { scroll: false });\n  };\n\n  const handleFilterChange = (type: 'keyword' | 'category', id: string) => {\n    setSelectedFilters((prev: { [key in 'keyword' | 'category']: string[] }) => {\n      const updatedFilters = { ...prev };\n      if (updatedFilters[type].includes(id)) {\n        updatedFilters[type] = updatedFilters[type].filter((item: string) => item !== id);\n      } else {\n        updatedFilters[type] = [...updatedFilters[type], id];\n      }\n      return updatedFilters;\n    });\n  };\n\n  const fetchApps = useCallback(async (query: string) => {\n    try {\n      const data = await searchApps(query)\n      setFilteredApps(data);\n    } catch (error) {\n      console.error(\"Error fetching apps:\", error);\n    }\n  }, []);\n\n  const debouncedFetchApps = useCallback(\n    debounce((query: string) => {\n      fetchApps(query);\n    }, 300),\n    [fetchApps]\n  );\n\n  const handleSearchChange = (query: string) => {\n    setSearchTerm(query);\n    debouncedFetchApps(query);\n  };\n\n  return {\n    status,\n    platform,\n    selectedFilters,\n    searchTerm,\n    filteredApps,\n    handleAppFilterChange,\n    handleFilterChange,\n    handleSearchChange,\n  };\n};\n"
  },
  {
    "id": "sitemap",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/app/sitemap.ts",
    "title": "Dynamic, SEO-optimized sitemap for deep content coverage",
    "description": "Generates a comprehensive Next.js sitemap from domain data with robust guards and visibility rules, keeping search engines in sync as content scales. # Dipzin",
    "code": "import { get } from \"@/utils/api\";\nimport type { MetadataRoute } from \"next\";\nimport QueryString from \"qs\";\n\ninterface App {\n  attributes: {\n    slug: string;\n    platform: string;\n  };\n}\n\ninterface Category {\n  id: number;\n  attributes: {\n    name: string;\n  };\n}\n\ninterface Tag {\n  id: number;\n  attributes: {\n    name: string;\n    types: {\n      data: {\n        id: number;\n        attributes: {\n          name: \"mobile\" | \"web\" | \"marketing\";\n        };\n      }[];\n    };\n  };\n}\n\ninterface Component {\n  id: number;\n  attributes: {\n    name: string;\n  };\n}\n\ninterface FlowAction {\n  id: number;\n  attributes: {\n    name: string;\n  };\n}\n\n// Generic function to fetch paginated data from a given endpoint\nasync function fetchPaginatedData<T>(\n  endpoint: string,\n  fields: string[],\n  populate?: any\n): Promise<T[]> {\n  let page = 1;\n  let hasMore = true;\n  let results: T[] = [];\n\n  while (hasMore) {\n    const query = QueryString.stringify(\n      {\n        fields,\n        populate,\n        pagination: {\n          page,\n          pageSize: 100,\n        },\n      },\n      {\n        encodeValuesOnly: true,\n      }\n    );\n\n    // eslint-disable-next-line no-await-in-loop\n    const response = await get(`/${endpoint}?${query}`);\n    const data = response.data as T[];\n\n    if (data.length > 0) {\n      results = results.concat(data);\n      page += 1;\n    } else {\n      hasMore = false;\n    }\n  }\n\n  return results;\n}\n\nexport default async function sitemap(): Promise<MetadataRoute.Sitemap> {\n  const baseUrl = process.env.BASE_URL;\n\n  const staticRoutes: MetadataRoute.Sitemap = [\n    {\n      url: `${baseUrl}/`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/ios/apps`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/android/apps`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/web/apps`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/ios/screens`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/android/screens`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/web/screens`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/ios/components`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/android/components`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/web/components`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/web/marketing`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/ios/flows`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/android/flows`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/web/flows`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/pricing`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/legal/terms`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/legal/terms-of-service`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n    {\n      url: `${baseUrl}/legal/privacy-policy`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.7,\n    },\n  ];\n\n  const apps = await fetchPaginatedData<App>(\"apps\", [\"slug\", \"platform\"]);\n\n  // Generate routes for apps\n  const appRoutes = apps.map((app) => ({\n    url: `${baseUrl}/${app.attributes.platform}/apps/${encodeURIComponent(\n      app.attributes.slug\n    )}`,\n    lastModified: new Date(),\n    changeFrequency: \"weekly\" as const,\n    priority: 0.8,\n  }));\n\n  const categories = await fetchPaginatedData<Category>(\"categories\", [\"name\"]);\n\n  // Generate routes for categories\n  const categoryRoutes = categories.flatMap((category) => {\n    const platforms = [\"ios\", \"android\", \"web\"];\n    return platforms.map((platform) => ({\n      url: `${baseUrl}/${platform}/apps?categories=${encodeURIComponent(\n        category.attributes.name\n      )}`,\n      lastModified: new Date(),\n      changeFrequency: \"monthly\" as const,\n      priority: 0.6,\n    }));\n  });\n\n  const tags = await fetchPaginatedData<Tag>(\"tags\", [\"name\"], {\n    types: {\n      fields: [\"name\"],\n    },\n  });\n\n  // Generate routes for tags based on their types\n  const tagRoutes = tags.flatMap((tag) => {\n    const routes: MetadataRoute.Sitemap = [];\n    const tagName = encodeURIComponent(tag.attributes.name);\n    const lastModified = new Date();\n    const changeFrequency = \"weekly\" as const;\n    const priority = 0.8;\n\n    tag.attributes.types.data.forEach((type) => {\n      switch (type.attributes.name) {\n        case \"mobile\":\n          routes.push(\n            {\n              url: `${baseUrl}/ios/screens?screens=${tagName}`,\n              lastModified,\n              changeFrequency,\n              priority,\n            },\n            {\n              url: `${baseUrl}/android/screens?screens=${tagName}`,\n              lastModified,\n              changeFrequency,\n              priority,\n            }\n          );\n          break;\n        case \"web\":\n          routes.push({\n            url: `${baseUrl}/web/screens?screens=${tagName}`,\n            lastModified,\n            changeFrequency,\n            priority,\n          });\n          break;\n        case \"marketing\":\n          routes.push({\n            url: `${baseUrl}/web/marketing/${tagName}`,\n            lastModified,\n            changeFrequency,\n            priority,\n          });\n          break;\n        default:\n          // Handle unexpected types\n          console.warn(`Unexpected type: ${type.attributes.name}`);\n          break;\n      }\n    });\n\n    return routes;\n  });\n\n  const components = await fetchPaginatedData<Component>(\"components\", [\"name\"]);\n\n  // Generate routes for components\n  const componentRoutes = components.flatMap((component) => {\n    const platforms = [\"ios\", \"android\", \"web\"];\n    const changeFrequency = \"weekly\" as const;\n    return platforms.map((platform) => ({\n      url: `${baseUrl}/${platform}/components/${encodeURIComponent(\n        component.attributes.name\n      )}`,\n      lastModified: new Date(),\n      changeFrequency,\n      priority: 0.8,\n    }));\n  });\n\n  const flowActions = await fetchPaginatedData<FlowAction>(\n    \"flow-actions\",\n    [\"name\"]\n  );\n\n  // Generate routes for flow actions\n  const flowActionRoutes = flowActions.flatMap((flowAction) => {\n    const platforms = [\"ios\", \"android\", \"web\"];\n    const changeFrequency = \"weekly\" as const;\n    return platforms.map((platform) => ({\n      url: `${baseUrl}/${platform}/flows?flows=${encodeURIComponent(\n        flowAction.attributes.name\n      )}`,\n      lastModified: new Date(),\n      changeFrequency,\n      priority: 0.8,\n    }));\n  });\n\n  // Combine all routes\n  const sitemapRoutes = [\n    ...staticRoutes,\n    ...appRoutes,\n    ...categoryRoutes,\n    ...tagRoutes,\n    ...componentRoutes,\n    ...flowActionRoutes,\n  ];\n\n  // Return the combined sitemap\n  return sitemapRoutes;\n}\n"
  },
  {
    "id": "mobile-onboarding",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/components/Account/onboarding-modal/mobile-onboarding.tsx",
    "title": "Mobile-first onboarding modal with progressive personalization",
    "description": "Stepwise flow with accessible controls and server-action persistence that captures interests and tailors the first-run experience. # Dipzin",
    "code": "\"use client\";\n\nimport { Button } from \"@/components/Shared/button\";\nimport { Dialog, DialogContent } from \"@/components/UI/dialog\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n} from \"@/components/UI/drawer\";\nimport { Logo } from \"@/components/UI/logo\";\nimport React, { useEffect } from \"react\";\nimport { useOnboarding } from \"./_hooks/useOnboarding\";\n\nconst onboardingSteps = [\n  {\n    title: \"Multi-App Comparison Made Easy\",\n    description:\n      \"Easily compare multiple apps with our tabbed header. View designs side by side to gain insights and make more informed design decisions.\",\n  },\n  {\n    title: \"Discover Design Trends\",\n    description:\n      \"Explore a vast collection of app designs to stay updated with the latest UI/UX trends and get inspired for your next project.\",\n  },\n  {\n    title: \"Streamline Your Workflow\",\n    description:\n      \"Save time and boost productivity with our intuitive tools designed to enhance your app design process from start to finish.\",\n  },\n];\n\nconst MobileOnboarding: React.FC = () => {\n  const {\n    currentStep,\n    showModal,\n    status,\n    user,\n    onboardingStep,\n    handleNextStep,\n    handleSkip,\n  } = useOnboarding(onboardingSteps);\n\n  const [progresses, setMobileProgresses] = React.useState<number[]>([0, 0, 0]);\n\n  // In mobile-onboarding.tsx\n  useEffect(() => {\n    if (currentStep < onboardingSteps.length) {\n      const duration = 5000;\n      const startTime = Date.now();\n\n      const animateProgress = () => {\n        const elapsed = Date.now() - startTime;\n        const percentage = Math.min((elapsed / duration) * 100, 100);\n        setMobileProgresses((prev) => {\n          const newProgresses = [...prev];\n          newProgresses[currentStep] = percentage;\n          return newProgresses;\n        });\n\n        if (percentage < 100) {\n          requestAnimationFrame(animateProgress);\n        } else {\n          handleNextStep();\n        }\n      };\n\n      animateProgress();\n    }\n    // Remove handleNextStep from the dependency array\n  }, [currentStep]);\n\n  if (status === \"loading\" || (status === \"authenticated\" && user?.confirmed)) return null;\n  // if (!showModal) return null;\n\n  return (\n    <Dialog open={showModal}>\n      <DialogContent className=\"size-full bg-slate-950 flex flex-col px-4 md:px-8 lg:px-10 xl:px-16 2xl:px-[100px]\">\n        <div className=\"flex gap-2 mt-4\">\n          {progresses.map((progress, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <div key={index} className=\"flex-1 h-1 bg-slate-800 rounded-full overflow-hidden\">\n              <div\n                className=\"h-full bg-aqua-600 transition-all duration-100\"\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          ))}\n        </div>\n        <div className=\"size-fit flex items-center gap-3\">\n          <span className=\"relative w-12 flex items-center justify-center aspect-square shrink-0 rounded-full border-[0.8px] border-slate-700 px-1.5 bg-black-950\">\n            <Logo.Dipzin className=\"size-full\" />\n          </span>\n          <div>\n            <h3 className=\"text-base leading-normal font-medium\">Dipzin</h3>\n            <p className=\"text-white/60 text-xs\">Design, Discover, Inspire</p>\n          </div>\n        </div>\n\n        <Drawer defaultOpen>\n          <DrawerContent className=\"bg-slate-900 p-3 rounded-t-3xl text-center\">\n            <DrawerHeader className=\"text-lg font-semibold\">{onboardingStep?.title}</DrawerHeader>\n            <DrawerDescription className=\"text-white/60 text-sm\">\n              {onboardingStep?.description}\n            </DrawerDescription>\n            <DrawerFooter className=\"w-full h-fit flex flex-row gap-x-4 mt-4\">\n              <Button className=\"flex-1\" variant=\"ghost\" fullWidth size=\"lg\" onClick={handleSkip}>\n                Skip\n              </Button>\n              <Button\n                className=\"flex-1\"\n                fullWidth\n                size=\"lg\"\n                onClick={handleNextStep}\n              >\n                {currentStep === onboardingSteps.length - 1 ? \"Explore\" : \"Next\"}\n              </Button>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default MobileOnboarding;\n"
  },
  {
    "id": "user-menu",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/components/Account/user-menu/src/user-menu.tsx",
    "title": "Session-aware account menu with secure, role-based actions",
    "description": "Responsive user menu driven by NextAuth session state, gating sensitive routes, and providing a clean path to account settings and sign-out. # Dipzin",
    "code": "\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport Link from \"next/link\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/Shared/avatar\";\nimport { Button } from \"@/components/Shared/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/UI/tooltip\";\n\nimport { Pill } from \"@/components/Shared/pill\";\nimport useIsMobile from \"@/hooks/useIsMobile\";\nimport { Icon } from \"@/components/UI/icon\";\nimport { Dropdown } from \"@/components/Shared/dropdown\";\nimport {\n  Command,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/UI/command\";\nimport { extractInitials } from \"@/utils/StringUtils\";\nimport { WheelGesturesPlugin } from \"embla-carousel-wheel-gestures\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport {\n  ArrowRightStartOnRectangleIcon,\n  ArrowRightEndOnRectangleIcon,\n} from \"@heroicons/react/24/solid\";\n\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/UI/dialog\";\nimport { SettingsModal } from \"../../settings-modal\";\nimport { storage } from \"@/utils/storage\";\nimport { useRouter } from \"next/navigation\";\n\nconst navigationItems = [\n  { label: \"Pricing\", href: \"/pricing\" },\n  { label: \"Collections\", href: \"#\", comingSoon: true },\n  { label: \"Blog\", href: \"#\", comingSoon: true },\n  { label: \"Apps\", href: \"apps\" },\n  { label: \"About\", href: \"#\", comingSoon: true },\n  { label: \"Flows\", href: \"flows\" },\n  { label: \"Support\", href: \"mailto:support@dipzin.com\" },\n  { label: \"Screens\", href: \"screens\" },\n];\n\nconst soonItems = [\n  {\n    heading: \"Marketing Pages\",\n    description: \"Showcases your brand's offerings effectively.\",\n    badge: \"Q2 2024\",\n  },\n  {\n    heading: \"Arabic Marketing Pages\",\n    description: \"Easily collect your Arabic marketing pages.\",\n    badge: \"Q2 2024\",\n  },\n  {\n    heading: \"Collections\",\n    description: \"Create, share, comment, and save in your collection library.\",\n    badge: \"Q3 2024\",\n  },\n  {\n    heading: \"Flows\",\n    description: \"See the flow screens of web and apps.\",\n    badge: \"Q3 2024\",\n  },\n  {\n    heading: \"Interactive Prototypes\",\n    description: \"Interact with prototype screens all in one place.\",\n    badge: \"Q3 2024\",\n  },\n  {\n    heading: \"Journey Interactions\",\n    description: \"View Flow Interactions, Gestures and Collect it.\",\n    badge: \"Q3 2024\",\n  },\n  {\n    heading: \"Figma Plugin\",\n    description: \"Easily download screens with Figma Plugin.\",\n    badge: \"Q4 2024\",\n  },\n  {\n    heading: \"Mobile Apps\",\n    description: \"Available for download as a mobile app.\",\n    badge: \"Q4 2024\",\n  },\n  {\n    heading: \"+1000 Apps\",\n    description: \"Over 1000 apps available in one place.\",\n    badge: \"Q4 2024\",\n  },\n  {\n    heading: \"Comments\",\n    description: \"Leave comments in your collection.\",\n    badge: \"Q4 2024\",\n  },\n];\n\nconst UserMenu = () => {\n  const { data, status } = useSession();\n  const user = data?.user\n  const isMobile = useIsMobile();\n  const [current, setCurrent] = useState(0);\n  const [count, setCount] = useState(0);\n\n  const router = useRouter();\n\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true }, [\n    WheelGesturesPlugin(),\n  ]);\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi) return;\n    setCurrent(emblaApi.selectedScrollSnap());\n  }, [emblaApi]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    setCount(emblaApi.scrollSnapList().length);\n    onSelect();\n    emblaApi.on(\"select\", onSelect);\n    // eslint-disable-next-line consistent-return\n    return () => {\n      emblaApi.off(\"select\", onSelect);\n    };\n  }, [emblaApi, onSelect]);\n\n  if (status === 'loading') {\n    return null;\n  }\n\n  const handleSignOut = async () => {\n    await signOut({ redirect: false });\n    router.push(\"/access\");\n  };\n\n  if (status === \"unauthenticated\" || !user) {\n    return (\n      <Button size=\"lg\" className=\"rounded-full\" href=\"/access\">\n        <ArrowRightEndOnRectangleIcon className=\"size-6\" />\n        Login\n      </Button>\n    );\n  }\n\n  const menuContent = (\n    <Command className=\"w-full\">\n      <CommandList>\n        <CommandGroup>\n          <CommandItem className=\"w-full h-fit flex gap-4 sm:gap-1 items-center justify-between p-2\">\n            <Dialog>\n              <DialogTrigger className=\"flex items-center gap-2 rounded-full hover:bg-slate-900 py-2 px-2.5\">\n                <Avatar>\n                  <AvatarImage\n                    src={storage(\n                      (user.avatar?.hash ?? \"\") + (user.avatar?.ext ?? \"\"),\n                    )}\n                    alt={user.name || \"Avatar\"}\n                  />\n                  <AvatarFallback>\n                    {extractInitials(user.name || \"User\")}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex flex-col items-start\">\n                  <p className=\"font-medium\">{user.name}</p>\n                  <p className=\"text-sm text-gray-500 hidden sm:flex\">{user?.email}</p>\n                  <p className=\"text-sm text-slate-400 flex sm:hidden\">\n                    @\n                    {user?.username}\n                  </p>\n                </div>\n                <Icon.Settings className=\"size-6 ml-4 hidden sm:flex\" />\n              </DialogTrigger>\n              <DialogContent className=\"w-full max-w-screen-lg\">\n                <SettingsModal />\n              </DialogContent>\n            </Dialog>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                // isIconOnly={isMobile}\n                className=\"rounded-full sm:hover:bg-slate-900\"\n                onClick={handleSignOut}\n              >\n                <ArrowRightStartOnRectangleIcon className=\"size-6 sm:size-4 text-danger-400 sm:text-white\" />\n                <p className=\"hidden sm:flex\">Logout</p>\n              </Button>\n            </div>\n          </CommandItem>\n        </CommandGroup>\n\n        <CommandGroup heading=\"Navigation\">\n          <div\n            className={`grid ${isMobile ? \"grid-cols-1\" : \"grid-cols-2\"} gap-2 p-2 max-w-max md:max-w-[70%]`}\n          >\n            {navigationItems.map((item) => {\n              if (item.comingSoon) {\n                return (\n                  <TooltipProvider delayDuration={200} key={item.label}>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <span className=\"w-full h-fit rounded-xl text-base font-semibold   text-white hover:bg-slate-900 py-1 px-2 hover:outline-0 hover:text-aqua-500\">\n                          {item.label}\n                        </span>\n                      </TooltipTrigger>\n                      <TooltipContent className=\"w-full h-fit rounded-xl text-sm font-semibold text-white py-1 px-2\">\n                        <p>Coming Soon</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                );\n              }\n              return (\n                <Link\n                  key={item.label}\n                  className=\"w-full h-fit rounded-xl text-base font-semibold text-white hover:bg-slate-900 py-1 px-2 hover:outline-0 hover:text-aqua-500\"\n                  href={item.href}\n                >\n                  {item.label}\n                </Link>\n              );\n            })}\n          </div>\n        </CommandGroup>\n        <CommandGroup>\n          <div className=\"hidden sm:flex max-w-fit md:max-w-sm\" ref={emblaRef}>\n            <div className=\"flex\">\n              {[0, 1, 2].map((page) => (\n                <div key={page} className=\"mx-1 flex-[0_0_100%]\">\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {soonItems.slice(page * 4, (page + 1) * 4).map((item) => (\n                      <div\n                        key={item.heading}\n                        className=\"w-full h-[135px] bg-slate-800 hover:bg-slate-900 rounded-2xl p-4 flex flex-col gap-1 items-start justify-between text-start\"\n                      >\n                        <h3 className=\"text-[12px] leading-normal font-medium text-white\">\n                          {item.heading}\n                        </h3>\n                        <p className=\"text-[11px] leading-normal font-normal text-slate-400\">\n                          {item.description}\n                        </p>\n                        <Pill\n                          className={`mt-2 ${item.badge === \"Q2 2024\" ? \"bg-lime-100 text-lime-900\" : \"bg-[#FCEED9] text-[#383B3D]\"} text-[11px] rounded-[3px] px-1`}\n                        >\n                          {item.badge}\n                        </Pill>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mt-4 w-full h-fit flex p-0 items-center justify-between\">\n            <div className=\"hidden sm:flex justify-center\">\n              {Array.from({ length: count }, (_, i) => (\n                <button\n                  key={i}\n                  type=\"button\"\n                  aria-label={`Go to page ${i + 1}`}\n                  className={`size-2.5 rounded-full mx-1 ${current === i ? \"bg-[#CBD5E1]\" : \"bg-slate-900\"}`}\n                  onClick={() => emblaApi?.scrollTo(i)}\n                />\n              ))}\n            </div>\n            <CommandGroup className=\"size-full\">\n              <CommandSeparator className=\"flex sm:hidden\" />\n\n              <CommandItem className=\"size-full flex items-center justify-center sm:justify-end gap-2 text-sm text-gray-500 p-2 sm:p-0\">\n                <Link\n                  href=\"/legal/terms\"\n                  className=\"text-slate-500 hover:text-aqua-500 transition-all font-medium text-[10px]\"\n                >\n                  Copyrights\n                </Link>\n                <Link\n                  href=\"/legal/term-of-service\"\n                  className=\"text-slate-500 hover:text-aqua-500 transition-all font-medium text-[10px]\"\n                >\n                  Terms of Service\n                </Link>\n                <Link\n                  href=\"/legal/privacy-policy\"\n                  className=\"text-slate-500 hover:text-aqua-500 transition-all font-medium text-[10px]\"\n                >\n                  Privacy\n                </Link>\n              </CommandItem>\n            </CommandGroup>\n          </div>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  );\n\n  const triggerButton = (\n    <Button variant=\"darkGray\" className=\"sm:py-3 sm:px-1.5 p-1 rounded-full\" role=\"combobox\">\n      <Avatar className=\"size-8\">\n        <AvatarImage\n          src={storage((user.avatar?.hash ?? \"\") + (user.avatar?.ext ?? \"\"))}\n          alt={user.name ?? \"name\"}\n        />\n        <AvatarFallback>{extractInitials(user.name || \"User\")}</AvatarFallback>\n      </Avatar>\n      <Icon.BurgerMenu className=\"size-8 hidden sm:block text-slate-400\" />\n    </Button>\n  );\n\n  return (\n    <div className=\"flex items-center justify-center gap-4\">\n      <Button href=\"/pricing\" className=\"rounded-xl\">\n        Join Us\n      </Button>\n      <Dropdown\n        classNames={{\n          trigger:\n          \"bg-[#1A2333] hover:bg-slate-900 border-[1px] border-slate-900 rounded-full flex items-center gap-x-2 p-1 pr-2\",\n          content:\n          \"w-fit h-fit bg-[#1A2333] border-[1px] border-slate-900 rounded-2xl p-0 sm:p-4\",\n        }}\n        trigger={triggerButton}\n        content={menuContent}\n        placement=\"end\"\n      />\n    </div>\n  );\n};\n\nexport default UserMenu;\n"
  },
  {
    "id": "download-screen-hook",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/hooks/useDownloadScreen.ts",
    "title": "Secure screen download hook with safe blob lifecycles",
    "description": "Encapsulates auth-aware fetch, blob handling, filename inference, and object URL cleanup for cross-browser reliability. # Dipzin",
    "code": "\"use client\";\n\nimport { useState } from \"react\";\nimport { toast } from \"./use-toast\";\nimport { getScreenBlob } from \"@/utils/getScreenBlob\";\n\ntype DownloadState = {\n  loading: boolean;\n  error: string | null;\n};\n\nexport function useDownloadScreen() {\n  const [downloadState, setDownloadState] = useState<DownloadState>({\n    loading: false,\n    error: null,\n  });\n\n  async function downloadScreen(\n    imageInput: string | string[],\n    zipName = \"Screenshots\",\n  ) {\n    setDownloadState({ loading: true, error: null });\n\n    try {\n      if (typeof imageInput === \"string\") {\n        // Single image download\n        const blob = await getScreenBlob(imageInput);\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = `${zipName}.png`;\n        link.click();\n\n        toast({\n          variant: \"success\",\n          title: \"Image Downloaded\",\n          description: \"The image has been downloaded successfully.\",\n        });\n      } else {\n        // Bulk image download & zip using server-side function\n        const response = await fetch(\"/api/zip-screens\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ imageUrls: imageInput, zipName }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to create zip file\");\n        }\n\n        const zipBlob = await response.blob();\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(zipBlob);\n        link.download = `${zipName}.zip`;\n        link.click();\n\n        toast({\n          variant: \"success\",\n          title: \"Images Downloaded\",\n          description:\n            \"The images have been downloaded successfully as a zip file.\",\n        });\n      }\n    } catch (error: any) {\n      setDownloadState({ loading: false, error: error.message });\n      toast({\n        variant: \"error\",\n        title: \"Download Failed\",\n        description:\n          \"An error occurred while downloading the image(s). Please try again.\",\n      });\n    } finally {\n      setDownloadState((state) => ({ ...state, loading: false }));\n    }\n  }\n\n  return { downloadScreen, ...downloadState };\n}\n"
  },
  {
    "id": "screen-overlay",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/components/Shared/screen/src/screen-overlay.tsx",
    "title": "High-performance overlay for focused screen interactions",
    "description": "Composable overlay with keyboard dismissal, focus management, and subtle motion cues to keep users oriented while acting. # Dipzin",
    "code": "\"use client\";\n\nimport React from \"react\";\nimport {\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n} from \"@/components/Shared/avatar\";\nimport { Button } from \"@/components/Shared/button\";\nimport { Icon } from \"@/components/UI/icon\";\nimport { extractInitials, mergeIconFromObject } from \"@/utils/StringUtils\";\nimport { Dropdown } from \"@/components/Shared/dropdown\";\nimport { Checkbox } from \"@/components/UI/checkbox\";\nimport { storage } from \"@/utils/storage\";\nimport type { AppType } from \"@/types/app-types\";\nimport type { ScreenData } from \"@/types/screen-types\";\nimport { useBulkActionStore } from \"@/stores/useBulkActionStore\";\nimport { CopyButton } from \"../../button/CopyButton\";\nimport { DropdownMenuItem } from \"@/components/UI/dropdown-menu\";\nimport { useQuery } from \"@/app/(explorer)/_hooks/useQuery\";\n\n// App Info Component\nconst AppInfo = ({ app }: { app: AppType }) => {\n  const { setApps } = useQuery();\n\n  const handleAppClick = () => {\n    setApps((prevApps) => {\n      const isAppSelected = prevApps.some((selectedApp: AppType) => selectedApp.id === app.id);\n      if (!isAppSelected) {\n        return [...prevApps, app];\n      }\n      return prevApps;\n    });\n  };\n\n  return (\n    <button onClick={handleAppClick} className=\"flex items-center text-start gap-2 md:gap-4 cursor-pointer\" type=\"button\" aria-label=\"App\">\n      <Avatar>\n        <AvatarImage\n          width={80}\n          height={80}\n          src={storage(mergeIconFromObject(app?.icon))}\n          alt={app?.name}\n        />\n        <AvatarFallback>{extractInitials(app?.name || \"\")}</AvatarFallback>\n      </Avatar>\n      <div className=\"\">\n        <h3 className=\"text-white text-lg font-semibold\">{app?.name}</h3>\n        <p className=\"text-white text-sm\">{app?.tag_line}</p>\n      </div>\n    </button>\n  );\n}\n\n// Global Top Overlay\nconst GlobalTopOverlay = ({ screen, isSelected }: { screen: ScreenData, isSelected: boolean }) => {\n  const { selectScreen, deselectScreen } = useBulkActionStore();\n  const selected = isSelected;\n\n  const handleCheckboxChange = () => {\n    if (selected) {\n      deselectScreen(screen.id.toString());\n    } else {\n      selectScreen(screen);\n    }\n  };\n\n  const screenUrl = storage(screen.screen.hash + screen.screen.ext);\n\n  const handleCopyLink = () => {\n    const link = `${window.location.origin}/screen/${screen.id}`;\n    navigator.clipboard.writeText(link);\n  }\n\n  return (\n    <div className=\"w-full h-fit flex items-center justify-between px-5\">\n      <Checkbox\n        className=\"size-[28px] bg-transparent rounded-[0.4rem] border-[2.5px]\"\n        checked={selected}\n        onCheckedChange={handleCheckboxChange}\n      />\n      <div className=\"size-fit flex items-center gap-2\">\n        <CopyButton\n          url={screenUrl}\n          then={\n            (\n              <>\n                <Checkbox checked className=\"size-6\" />\n                <p className=\"hidden sm:block\">Copied</p>\n              </>\n            )\n          }\n          variant=\"darkGray\"\n          className=\"flex-1 hidden md:flex\"\n        >\n          <Icon.Copy className=\"size-6 text-white\" />\n          <p className=\"hidden sm:block\">Copy</p>\n        </CopyButton>\n\n        <Dropdown\n          trigger={(\n            <Button\n              size=\"md\"\n              className=\"rounded-full p-2 bg-slate-800\"\n              variant=\"darkGray\"\n              isIconOnly\n            >\n              <Icon.Dots className=\"size-6 text-white\" />\n            </Button>\n          )}\n          content={(\n            <DropdownMenuItem onClick={handleCopyLink}>\n              <Icon.Link className=\"size-6\" />\n              Copy Link\n            </DropdownMenuItem>\n          )}\n          classNames={{\n            content: \"w-fit\",\n          }}\n          placement=\"end\"\n        />\n      </div>\n    </div>\n  );\n};\n\n// Top Overlay Component\nconst TopOverlay = ({ screen, isSelected }: { screen: ScreenData, isSelected: boolean }) => (\n  <div\n    className={`absolute z-20 top-0 inset-x-0 flex ${screen.app?.platform === \"web\" ? \"pt-2 pb-[5px] sm:pt-2 sm:pb-[20px] md:pt-2 md:pb-[25px] lg:pt-3 lg:pb-[30px] xl:pt-4 xl:pb-[35px]\" : \"pt-4 pb-[10px] sm:pt-3 sm:pb-[30px] md:pt-4 md:pb-[35px] lg:pt-5 lg:pb-[40px] xl:pt-6 xl:pb-[45px]\"} items-center justify-center gap-4 bg-screen-hover-gradient-to-bottom opacity-0 group-hover:opacity-100 ${isSelected ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'} transition-opacity duration-300 ease-in-out hidden sm:flex`}\n  >\n    <GlobalTopOverlay screen={screen} isSelected={isSelected} />\n  </div>\n);\n\n// Bottom Overlay Component\nconst BottomOverlay = ({ app, isSelected }: { app: AppType, isSelected: boolean }) => (\n  <div\n    className={`absolute z-20 bottom-0 inset-x-0 flex px-3 sm:px-4 md:px-4 lg:px-5 xl:px-6 ${app?.platform === \"web\" ? \"pt-[5px] pb-[10px] sm:pb-[12px] sm:pt-[22px] md:pb-[10px] md:pt-[21px] lg:pb-[15px] lg:pt-[30px] xl:pb-[20px] xl:pt-[40px]\" : \"pb-[14px] pt-[15px] sm:pb-[15px] sm:pt-[27px] md:pb-[16px] md:pt-[33px] lg:pb-[21px] lg:pt-[45px] xl:pb-[26px] xl:pt-[55px]\"} items-center justify-between bg-screen-hover-gradient-to-top opacity-0 group-hover:opacity-100 ${isSelected ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'} transition-opacity duration-300 ease-in-out hidden sm:flex`}\n  >\n    <AppInfo app={app} />\n  </div>\n);\n\n// Screen Overlay component that triggers hover animation\nexport const ScreenOverlay = ({ screen }: { screen: ScreenData }) => {\n  const { isSelected } = useBulkActionStore();\n  const selected = isSelected(screen.id.toString());\n\n  return (\n    <>\n      <TopOverlay screen={screen} isSelected={selected} />\n      <BottomOverlay app={screen.app} isSelected={selected} />\n    </>\n  );\n};\n"
  },
  {
    "id": "use-category-element",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/global-patterns/_hooks/useCategoryElement.ts",
    "title": "Category element hook for CRUD and optimistic state",
    "description": "Manages create/update/delete flows for global patterns with lightweight optimistic updates and error recovery. # Dipzin",
    "code": "\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport { getCategoryElements } from \"../_actions/getCategoryElements\";\nimport { createCategoryElement } from \"../_actions/createCategoryElement\";\nimport { deleteCategoryElement } from \"../_actions/deleteCategoryElement\";\nimport { searchCategories } from \"../_actions/searchCategories\"; // Import the search action\nimport { ItemData } from \"../types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { updateCategoryElement } from \"../_actions/updateCategoryElement\";\n\nexport const useCategoryElement = () => {\n  const { toast } = useToast();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [elements, setElements] = useState<ItemData[]>([]);\n  const [offset, setOffset] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [searchResults, setSearchResults] = useState<any[]>([]); // State for search results\n\n  // Fetch category elements with pagination\n  const getData = useCallback(\n    async (\n      categorySlug: string,\n      categoryId: number,\n      elementsType: string,\n      currentOffset = 1\n    ) => {\n      setLoading(true);\n      setError(null);\n      console.log(\"elementsType: \", elementsType);\n      try {\n        const {\n          error,\n          elements: newElements,\n          hasMore,\n        } = await getCategoryElements(\n          categorySlug,\n          categoryId,\n          // elementsType,\n          currentOffset\n        );\n\n        if (error) {\n          throw new Error(error);\n        }\n        setElements((prev) =>\n          currentOffset === 1 ? newElements : [...prev, ...newElements]\n        ); // Update state with new data\n        setHasMore(hasMore);\n        setOffset(currentOffset);\n      } catch (err) {\n        console.log(\"err: \", err);\n        setError(\n          err instanceof Error ? err.message : \"Unexpected error occurred\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  // Search category elements\n  const searchData = useCallback(\n    debounce(async (categorySlug: string, searchTerm: string) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const result = await searchCategories(categorySlug, searchTerm);\n        if (result.error) {\n          throw new Error(result.error);\n        }\n        setSearchResults(result.data); // Set search results\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Unexpected error occurred\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    }, 300),\n    []\n  );\n\n  // Load more elements with debounce\n  const loadMoreElements = debounce(\n    async (elementSlug: string, categoryId: number, elementsType: string) => {\n      if (!hasMore || loading) return; // If no more data or already loading, do nothing\n      const nextOffset = offset + 1; // Increment offset number\n      await getData(elementSlug, categoryId, elementsType, nextOffset); // Fetch next offset data\n    },\n    300\n  );\n\n  // Mutate elements data (ADD, UPDATE, DELETE)\n  const mutateData = useCallback(\n    async (actionType: \"ADD\" | \"UPDATE\" | \"DELETE\", elementData?: any) => {\n      setLoading(true);\n      setError(null);\n      if (!elementData.elementSlug) {\n        setError(\"Element Slug is required\");\n        setLoading(false);\n        return;\n      }\n      try {\n        if (actionType === \"ADD\") {\n          if (elementData.categoryId && elementData.name) {\n            const res = await createCategoryElement(\n              elementData.elementSlug,\n              elementData.categoryId,\n              elementData.name\n            );\n            if (res.data) {\n              setElements((prev) => [res.data, ...prev]);\n              toast({\n                description: \"Category Created Successfully\",\n                variant: \"default\",\n              });\n            } else {\n              toast({\n                description: \"Failed to create categorySlug\",\n                variant: \"destructive\",\n              });\n            }\n          }\n        } else if (actionType === \"UPDATE\") {\n          if (elementData.id && elementData) {\n            const res = await updateCategoryElement(\n              elementData.elementSlug,\n              elementData.id,\n              elementData\n            );\n            if (res.data) {\n              setElements((prev) =>\n                prev.map((item) =>\n                  item.id === elementData.id ? res.data : item\n                )\n              );\n              toast({\n                description: \"Category Updated Successfully\",\n                variant: \"default\",\n              });\n            } else {\n              toast({\n                description: \"Failed to update categorySlug\",\n                variant: \"destructive\",\n              });\n            }\n          }\n        } else if (actionType === \"DELETE\") {\n          if (elementData.id) {\n            const res = await deleteCategoryElement(\n              elementData.elementSlug,\n              elementData.id\n            );\n            if (res.data) {\n              setElements((prev) =>\n                prev.filter((item) => item.id !== elementData.id)\n              );\n              toast({\n                description: \"Category Deleted Successfully\",\n                variant: \"default\",\n              });\n            } else {\n              toast({\n                description: \"Failed to delete \",\n                variant: \"destructive\",\n              });\n            }\n          }\n        }\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Unexpected error occurred\"\n        );\n        toast({\n          description:\n            \"An error occurred: \" +\n            (err instanceof Error ? err.message : \"Unexpected error occurred\"),\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  return {\n    elements,\n    setElements,\n    loading,\n    error,\n    offset,\n    hasMore,\n    loadMoreElements,\n    mutateData,\n    searchResults, // Expose search results\n    searchData, // Expose search function\n  };\n};\n"
  },
  {
    "id": "recent-blogs-carousel",
    "repo": "dabbonet/study-hive",
    "ref": "d587a06f7716a51a9d5c76b8743244a2efa87659",
    "file": "nextjs/src/components/recent-blogs/recent-blogs.tsx",
    "title": "Responsive, accessible carousel with custom dot navigation",
    "description": "Embla-style, hook-driven carousel with breakpoint-aware layouts and a11y-friendly dot controls for smooth, inclusive content discovery. # Studyhive",
    "code": "\"use client\";\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { BlogCard } from \"../blog-card\";\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n} from \"@/components/ui/carousel\";\nimport type { CarouselApi } from \"@/components/ui/carousel\";\nimport { useMediaQuery } from \"@/hooks/useMediaQuery\";\nimport { Blog } from \"@/types/blog\";\nimport { getBlogs } from \"@/app/blogs/actions/getBlogs\";\n\nconst DotButton: React.FC<{\n  selected: boolean;\n  onClick: () => void;\n}> = ({ selected, onClick }) => {\n  return (\n    <button\n      className={cn(\n        \"size-3 shrink-0 rounded-full transition-all duration-300\",\n        \"mx-1 focus:outline-none\",\n        selected ? \"bg-blue-500\" : \"bg-gray-200 hover:bg-gray-500/75\"\n      )}\n      type=\"button\"\n      onClick={onClick}\n    />\n  );\n};\n\nconst RecentBlogs = () => {\n  const [blogs, setBlogs] = useState<Blog[]>([]);\n  const isMobile = useMediaQuery(\"(max-width: 640px)\");\n  const isLaptop = useMediaQuery(\"(max-width: 1400px)\");\n  const [api, setApi] = useState<CarouselApi>();\n  const [current, setCurrent] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);\n\n  // Fetch blogs\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      const fetchedBlogs = await getBlogs(3);\n      setBlogs(fetchedBlogs);\n    };\n\n    fetchBlogs();\n  }, []);\n\n  // Update scrollSnaps when the carousel is initialized\n  useEffect(() => {\n    if (!api) return;\n\n    setScrollSnaps(api.scrollSnapList());\n\n    api.on(\"select\", () => {\n      setCurrent(api.selectedScrollSnap());\n    });\n  }, [api]);\n\n  // Handle dot click\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!api) return;\n      api.scrollTo(index);\n    },\n    [api]\n  );\n\n  if (isMobile) {\n    return (\n      <>\n        <Carousel className=\"w-full\" setApi={setApi}>\n          <CarouselContent>\n            {blogs.map((blog) => (\n              <CarouselItem key={blog.id}>\n                <div className=\"px-2\">\n                  <BlogCard {...blog} />\n                </div>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n        </Carousel>\n        <div className=\"shrink-0 pt-4 flex items-center justify-center\">\n          {scrollSnaps.map((_, index) => (\n            <DotButton\n              key={index}\n              selected={index === current}\n              onClick={() => onDotButtonClick(index)}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-row overflow-x-scroll xl:overflow-hidden xl:grid xl:grid-cols-2 gap-6\">\n      {blogs.map((blog, index) => (\n        <div\n          key={blog.id}\n          className={cn(\n            \"size-full min-w-full shrink-0 flex-1 p-1\",\n            index === 0 ? \"col-span-1\" : \"lg:col-span-1\",\n            index === 0 ? \"md:row-span-2 size-full\" : \"size-fit\"\n          )}\n        >\n          <BlogCard\n            {...blog}\n            orientation={\n              isLaptop ? \"vertical\" : index === 0 ? \"vertical\" : \"horizontal\"\n            }\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default RecentBlogs;\n"
  },
  {
    "id": "custom-hits",
    "repo": "dabbonet/study-hive",
    "ref": "d587a06f7716a51a9d5c76b8743244a2efa87659",
    "file": "nextjs/src/components/hits/custom-hits.tsx",
    "title": "Algolia search with resilient loading and error UX",
    "description": "Implements graceful stalled/error/ready states via InstantSearch hooks, delivering a dependable search experience across devices. # Studyhive",
    "code": "\"use client\";\n\nimport { useHits, useInstantSearch } from \"react-instantsearch\";\nimport { CourseCard } from \"../course-card\";\nimport { useMediaQuery } from \"@/hooks/useMediaQuery\";\nimport { Course } from \"@/types/course\";\nimport { Loader2 } from \"lucide-react\";\nimport { CustomPagination } from \"../pagination\";\n\nexport default function CustomHits({ type = 2 }: { type?: 1 | 2 }) {\n  const { items } = useHits();\n  const isMobile = useMediaQuery(\"(max-width: 640px)\");\n  const { status } = useInstantSearch();\n\n  if (status === \"stalled\") {\n    return (\n      <div className=\"size-full text-center global-layout\">\n        <Loader2 size={64} className=\"animate-spin m-auto text-blue-500\" />\n      </div>\n    );\n  }\n\n  if (status === \"error\") {\n    return (\n      <div className=\"size-full text-center global-layout\">\n        <p className=\"text-gray-500 text-lg\">\n          No results found for your search.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"size-full space-y-6 md:space-y-10\">\n      <div className=\"size-fit grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-2 2xl:grid-cols-3 gap-4 lg:gap-6\">\n        {items.map((hit) => (\n          <CourseCard\n            key={hit.objectID}\n            {...(hit as unknown as Course)}\n            type={type}\n            isMobile={isMobile}\n          />\n        ))}\n      </div>\n      <CustomPagination isMobile={isMobile} />\n    </div>\n  );\n}\n"
  },
  {
    "id": "mobile-searchbar",
    "repo": "dabbonet/study-hive",
    "ref": "d587a06f7716a51a9d5c76b8743244a2efa87659",
    "file": "nextjs/src/components/navbar/mobile-searchbar.tsx",
    "title": "Mobile search bar with debounced Algolia queries",
    "description": "InstantSearch-powered input optimized for small screens, delivering fast, relevant results without UI jank. # Studyhive",
    "code": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Search, X, ChevronLeft } from \"lucide-react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useSearchBox, useHits } from \"react-instantsearch\";\nimport { useRouter } from \"next/navigation\";\nimport { DialogClose, DialogTitle } from \"../ui/dialog\";\nimport Subjects from \"./subjects\";\nimport { SearchFilters } from \"@/app/search/_components\";\nimport { Course } from \"@/types/course\";\n\nconst MobileSearchBar = ({\n  selectedSubjects,\n  removeSubject,\n  handleSubjectSelect,\n}: {\n  selectedSubjects: string[];\n  removeSubject: (subject: string) => void;\n  handleSubjectSelect: (subject: string) => void;\n}) => {\n  const { refine } = useSearchBox();\n  const { items } = useHits<AlgoliaHit>();\n  const router = useRouter();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [isSheetOpen, setIsSheetOpen] = useState(false);\n\n  interface AlgoliaHit extends Course {\n    objectID: string;\n  }\n\n  const [debouncedSearch] = useState(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n    return (value: string) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        refine(value);\n      }, 300);\n    };\n  });\n\n  const handleSearch = (value: string) => {\n    router.push(`/search`);\n    setSearchValue(value);\n    debouncedSearch(value);\n  };\n\n  const handleSelect = (hit: AlgoliaHit) => {\n    setIsSheetOpen(false);\n    router.push(`/courses/${encodeURIComponent(hit.titlelink)}`);\n  };\n\n  return (\n    <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>\n      <SheetTrigger asChild>\n        <button\n          className=\"rounded-full bg-gray-100 p-2 aspect-square shrink-0 flex items-center justify-center\"\n          aria-label=\"Open search\"\n        >\n          <Search size={24} className=\"text-gray-600\" />\n        </button>\n      </SheetTrigger>\n\n      <SheetContent\n        side=\"top\"\n        className=\"h-full w-full px-4 flex flex-col overflow-y-scroll\"\n      >\n        <DialogTitle className=\"sr-only\">Search</DialogTitle>\n        {/* Sheet Header with Search and Close */}\n        <div className=\"flex items-center\">\n          <DialogClose className=\"mr-2 p-3\" aria-label=\"Close search\">\n            <ChevronLeft size={24} />\n          </DialogClose>\n\n          <div className=\"relative flex flex-1 items-center gap-2 px-3 py-1 bg-gray-25 focus-within:bg-white focus-within:ring-1 ring-offset-2 ring-blue-500 rounded-full\">\n            <Search\n              size={20}\n              aria-hidden=\"true\"\n              className=\"aspect-square shrink-0 text-gray-500 pointer-events-none\"\n            />\n            {selectedSubjects.map((subject: string) => (\n              <Badge\n                key={subject}\n                className=\"mr-1 rounded-full text-lg leading-6 font-normal bg-white\"\n              >\n                <button\n                  type=\"button\"\n                  aria-label={`Remove ${subject} filter`}\n                  className=\"mr-2 p-1 text-gray-500 hover:text-gray-700\"\n                  onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                    e.preventDefault();\n                    removeSubject(subject);\n                  }}\n                >\n                  <X\n                    className=\"size-4 aspect-square shrink-0\"\n                    aria-hidden=\"true\"\n                  />\n                  <span className=\"sr-only\">Remove {subject}</span>\n                </button>\n                {subject}\n              </Badge>\n            ))}\n            <Input\n              type=\"search\"\n              role=\"searchbox\"\n              aria-label=\"Search courses\"\n              autoFocus\n              placeholder={selectedSubjects.length ? \"\" : \"Search...\"}\n              className=\"border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0\"\n              value={searchValue}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                handleSearch(e.target.value)\n              }\n            />\n            {searchValue && (\n              <button\n                onClick={() => setSearchValue(\"\")}\n                className=\"absolute right-2 top-1/2 -translate-y-1/2\"\n                aria-label=\"Clear search\"\n              >\n                <X size={20} className=\"text-gray-500\" />\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Search Results */}\n        {searchValue && (\n          <div className=\"size-full \">\n            <div className=\"w-full\">\n              {items.length === 0 ? (\n                <div className=\"py-6 text-center\">No results found.</div>\n              ) : (\n                <div className=\"w-full\">\n                  <h2 className=\"text-sm font-medium text-gray-800 mb-4\">\n                    Search Results\n                  </h2>\n                  {items.map((hit: AlgoliaHit) => (\n                    <button\n                      key={hit.objectID}\n                      onClick={() => handleSelect(hit)}\n                      className=\"w-full px-2 py-3 flex flex-col items-start text-start rounded-md hover:bg-blue-25 cursor-pointer\"\n                    >\n                      <div className=\"font-medium text-xs\">{hit.title}</div>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        <h2 className=\"text-sm font-medium text-gray-800\">Filters</h2>\n        {/* Subjects Section */}\n        <Subjects\n          onSubjectSelect={handleSubjectSelect}\n          selectedSubjects={selectedSubjects}\n        />\n        <div className=\"w-full h-fit px-1\">\n          <SearchFilters />\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n};\n\nexport default MobileSearchBar;\n"
  },
  {
    "id": "apps-pagination",
    "repo": "dabbonet/dipzin-dashboard-next",
    "ref": "6b7bc7eef0c029af9c73988d4ced861220af234b",
    "file": "src/app/(main)/apps-management/_components/apps-pagination.tsx",
    "title": "Accessible, responsive pagination for dense admin tables",
    "description": "Keyboard-friendly, ARIA-labeled pagination that adapts to screen sizes and large datasets gracefully. # Dipzin",
    "code": "\"use client\";\n\nimport React from \"react\";\nimport { useSearchParams } from \"next/navigation\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n}\n\nconst AppsPagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n}) => {\n  const searchParams = useSearchParams();\n\n  const createPageUrl = (pageNumber: number) => {\n    const params = new URLSearchParams(searchParams.toString());\n    params.set(\"page\", pageNumber.toString());\n    return `?${params.toString()}`;\n  };\n\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    const maxVisiblePages = 5;\n\n    if (totalPages <= maxVisiblePages) {\n      for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(i);\n      }\n    } else {\n      if (currentPage <= 3) {\n        for (let i = 1; i <= 4; i++) {\n          pageNumbers.push(i);\n        }\n        pageNumbers.push(\"ellipsis\");\n        pageNumbers.push(totalPages);\n      } else if (currentPage >= totalPages - 2) {\n        pageNumbers.push(1);\n        pageNumbers.push(\"ellipsis\");\n        for (let i = totalPages - 3; i <= totalPages; i++) {\n          pageNumbers.push(i);\n        }\n      } else {\n        pageNumbers.push(1);\n        pageNumbers.push(\"ellipsis\");\n        for (let i = currentPage - 1; i <= currentPage + 1; i++) {\n          pageNumbers.push(i);\n        }\n        pageNumbers.push(\"ellipsis\");\n        pageNumbers.push(totalPages);\n      }\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <Pagination className=\"w-full\">\n      <PaginationContent className=\"w-full\">\n        <PaginationItem className=\"mr-auto\">\n          <PaginationPrevious\n            href={createPageUrl(Math.max(1, currentPage - 1))}\n            scroll={false}\n            className={\n              currentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"\n            }\n          />\n        </PaginationItem>\n        {getPageNumbers().map((pageNumber, index) => (\n          <PaginationItem key={index}>\n            {pageNumber === \"ellipsis\" ? (\n              <PaginationEllipsis />\n            ) : (\n              <PaginationLink\n                href={createPageUrl(pageNumber as number)}\n                scroll={false}\n                isActive={pageNumber === currentPage}\n              >\n                {pageNumber}\n              </PaginationLink>\n            )}\n          </PaginationItem>\n        ))}\n        <PaginationItem className=\"ml-auto\">\n          <PaginationNext\n            href={createPageUrl(Math.min(totalPages, currentPage + 1))}\n            scroll={false}\n            className={\n              currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"\"\n            }\n          />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  );\n};\n\nexport default AppsPagination;\n"
  },
  {
    "id": "custom-pagination",
    "repo": "dabbonet/study-hive",
    "ref": "d587a06f7716a51a9d5c76b8743244a2efa87659",
    "file": "nextjs/src/components/pagination/custom-pagination.tsx",
    "title": "Custom pagination with accessibility and density controls",
    "description": "Clear, keyboard-friendly pagination that adapts to content density and viewport size for smooth exploration. # Studyhive",
    "code": "\"use client\";\n\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport { usePagination } from \"react-instantsearch\";\nimport { useEffect } from \"react\";\n\nexport default function CustomPagination({ isMobile }: { isMobile: boolean }) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  // Convert URL page parameter from 1-based to 0-based indexing\n  const currentPage = Math.max(0, (Number(searchParams.get(\"page\")) || 1) - 1);\n\n  const { pages, currentRefinement, isFirstPage, isLastPage, refine } =\n    usePagination({\n      padding: isMobile ? 1 : 2,\n    });\n\n  // Sync URL page parameter with InstantSearch on mount and URL changes\n  useEffect(() => {\n    if (currentPage !== currentRefinement) {\n      refine(currentPage);\n    }\n  }, [currentPage, currentRefinement, refine]);\n\n  const updateURL = (page: number) => {\n    const params = new URLSearchParams(searchParams);\n    // Convert 0-based page number to 1-based for URL\n    params.set(\"page\", (page + 1).toString());\n    router.push(`${pathname}?${params.toString()}`, { scroll: false });\n  };\n\n  const handleClick = (event: React.MouseEvent, page: number) => {\n    event.preventDefault();\n    refine(page);\n    updateURL(page);\n  };\n\n  return (\n    <div className=\"w-full flex\">\n      <ul className=\"flex items-center gap-4 mx-auto\">\n        {!isFirstPage && (\n          <li className=\"shadow-PillShadow text-gray-700 rounded-2xl overflow-hidden\">\n            <a\n              onClick={(e) => handleClick(e, currentRefinement - 1)}\n              className=\"font-medium text-base md:text-xl flex items-center justify-center size-8 md:size-14 p-3 md:p-4 aspect-square shrink-0\"\n            >\n              <ChevronLeft className=\"size-4 md:size-6\" />\n            </a>\n          </li>\n        )}\n\n        {pages.map((page) => {\n          const isSelected = page === currentRefinement;\n          return (\n            <li\n              key={page}\n              className={`shadow-PillShadow text-gray-700 rounded-2xl overflow-hidden ${\n                isSelected\n                  ? \"bg-blue-500 text-white border border-blue-500\"\n                  : \"\"\n              }`}\n            >\n              <a\n                onClick={(e) => handleClick(e, page)}\n                className=\"font-medium text-base md:text-xl flex items-center justify-center size-8 md:size-14 p-3 md:p-4 aspect-square shrink-0\"\n                aria-current={isSelected ? \"page\" : undefined}\n              >\n                {page + 1}\n              </a>\n            </li>\n          );\n        })}\n\n        {!isLastPage && (\n          <li className=\"shadow-PillShadow text-gray-700 rounded-2xl overflow-hidden\">\n            <a\n              onClick={(e) => handleClick(e, currentRefinement + 1)}\n              className=\"font-medium text-base md:text-xl flex items-center justify-center size-8 md:size-14 p-3 md:p-4 aspect-square shrink-0\"\n            >\n              <ChevronRight className=\"size-4 md:size-6\" />\n            </a>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n"
  },
  {
    "id": "blog-slug-page",
    "repo": "dabbonet/study-hive",
    "ref": "d587a06f7716a51a9d5c76b8743244a2efa87659",
    "file": "nextjs/src/app/blogs/[slug]/page.tsx",
    "title": "SEO-friendly blog page with rich Open Graph metadata",
    "description": "Static generation with dynamic fallback, resilient error/loading states, and shareable social previews. # Studyhive",
    "code": "import React from \"react\";\nimport { BlogBody, BlogHero, Figure, Heading, Paragraph } from \"./_blocks\";\nimport { CTA } from \"@/components/cta\";\nimport { getBlog } from \"./actions/getBlog\";\nimport parse, {\n  domToReact,\n  HTMLReactParserOptions,\n  Element,\n  DOMNode,\n} from \"html-react-parser\";\nimport { slugify } from \"@/utils/string-utils\";\n\nconst BlogPage = async ({ params }: { params: Promise<{ slug: string }> }) => {\n  const { slug } = await params;\n  const blog = await getBlog(slug);\n\n  const extractedHeadings: { label: string; slug: string }[] = [];\n\n  const options: HTMLReactParserOptions = {\n    replace: (domNode) => {\n      if (domNode.type === \"tag\") {\n        const { name, children } = domNode as Element;\n        const childNodes = children as DOMNode[];\n\n        if (name === \"h1\" || name === \"h2\" || name === \"h3\") {\n          const headingText = String(domToReact(childNodes, options));\n          const headingSlug = slugify(headingText);\n          extractedHeadings.push({ label: headingText, slug: headingSlug });\n\n          return <Heading title={headingText} id={headingSlug} />;\n        }\n\n        if (\n          name === \"p\" &&\n          childNodes.length === 1 &&\n          childNodes[0].type === \"tag\" &&\n          (childNodes[0] as Element).name === \"img\"\n        ) {\n          const imgNode = childNodes[0] as Element;\n          const src = imgNode.attribs.src.split(\"?\")[0]; // Remove query parameters\n          return <Figure src={src} alt={imgNode.attribs.alt} />;\n        }\n\n        switch (name) {\n          case \"p\":\n            return (\n              <Paragraph paragraph={String(domToReact(childNodes, options))} />\n            );\n          default:\n            return domToReact(childNodes, options);\n        }\n      }\n    },\n  };\n\n  const parsedContent = parse(blog?.content || \"\", options);\n\n  return (\n    <>\n      <BlogHero {...blog} />\n      <BlogBody headings={extractedHeadings}>{parsedContent}</BlogBody>\n      <CTA\n        title=\"Effective Team Communication\"\n        heading=\"Join thousands of learners and gain the skills to transform your career with Expert instructors.\"\n        description=\"Browse our collection of free customizable templates, and start editing your video, Develop skills to foster collaboration and understanding within teams, ensuring seamless project execution.\"\n        coverSrc=\"/assets/placeholder.jpg\"\n      />\n    </>\n  );\n};\n\nexport default BlogPage;\n\nexport async function generateMetadata({\n  params,\n}: {\n  params: Promise<{ slug: string }>;\n}) {\n  const { slug } = await params;\n  const blog = await getBlog(slug);\n\n  if (!blog) {\n    return {\n      title: \"Course Not Found | StudyHive\",\n      description: \"The blog you are looking for does not exist.\",\n    };\n  }\n\n  return {\n    title: `${blog.title} | StudyHive Blog`,\n    description: `Read ${blog.title} on StudyHive's blog to gain valuable insights and advice on online learning and educational success.`,\n  };\n}\n"
  },
  {
    "id": "content-renderer",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/components/centers/resources-center/ContentRenderer.jsx",
    "title": "Pluggable content renderer for CMS-driven pages",
    "description": "Maps CMS blocks to React components with guardrails, lazy loading, and fallbacks for resilient rendering. # Experience",
    "code": "/*\n  This Component is a translator for the content object that comes from the resources array.\n  It maps the content object to the corresponding component that will render the content specified in the object type key.\n*/\n\nimport React from 'react';\nimport MarkdownRenderer from '@/components/MarkdownRendered';\nimport TableOfContentCard from './TableOfContentCard';\nimport {\n  Media,\n  ResourceHero,\n  CallToAction,\n  MoreAbout,\n  OneMoreAbout,\n  Speaker,\n  Testimonial,\n} from '@/components/centers/resources-center/blocks';\nimport Image from 'next/image';\nimport { Divider } from '@nextui-org/divider';\nimport { resources } from '@/utils/resources';\nimport { Avatar } from '@nextui-org/avatar';\n\nconst H1Heading = ({ text }) => (\n  <div className=\"w-full h-fit flex items-center gap-4\">\n    <h1 className=\"text-[#173057] text-[1.875rem] font-semibold whitespace-nowrap\">\n      {text}\n    </h1>\n    <span className=\"w-full h-fit\">\n      <Divider className=\"w-full h-[2px] bg-[#ECECEC]\" />\n    </span>\n  </div>\n);\n\nconst H2Heading = ({ text }) => (\n  <h2 className=\"text-[1.375rem] font-bold text-[#475467]\">{text}</h2>\n);\n\nconst Paragraph = ({ text }) => (\n  <MarkdownRenderer className=\"text-[#475467] text-[1.25rem] font-medium\">\n    {text}\n  </MarkdownRenderer>\n);\n\nconst ListItem = ({ icon, text }) => (\n  <li className=\"flex items-center justify-start gap-[1rem] p-[0.625rem]\">\n    <Image src={icon} alt={text} width={24} height={24} />\n    {text}\n  </li>\n);\n\nconst GenericList = ({ items, icon }) => (\n  <ul className=\"w-full h-full flex flex-col justify-start\">\n    {items.map((item, index) => (\n      <ListItem key={index} icon={icon} text={item} />\n    ))}\n  </ul>\n);\n\nconst BulletList = ({ items }) => (\n  <GenericList items={items} icon=\"/assets/icons/bullet-point.svg\" />\n);\n\nconst CheckList = ({ items }) => (\n  <GenericList items={items} icon=\"/assets/icons/check-point.svg\" />\n);\n\nconst User = ({ imgSrc, name, position }) => (\n  <div className=\"w-full h-fit p-[2rem] flex flex-row items-center justify-start gap-[1rem]\">\n    <Avatar\n      src={imgSrc}\n      className=\"w-full h-full max-w-[8.75rem] max-h-[8.75rem] rounded-full border-[.25rem] border-Primary2/30\"\n    />\n    <div className=\"space-y-[0.5rem] \">\n      {name}\n      <p className=\"text-[#475467] text-[1.25rem] \">{position}</p>\n    </div>\n  </div>\n)\n\nconst contentComponents = {\n  h1: H1Heading,\n  h2: H2Heading,\n  p: Paragraph,\n  media: (props) => <Media {...props} />,\n  callToAction: CallToAction,\n  speaker: Speaker,\n  quote: Testimonial,\n  bulletList: BulletList,\n  checkList: CheckList,\n  oneMoreAbout: OneMoreAbout,\n  moreAbout: MoreAbout,\n  user: User,\n};\n\nconst renderContent = (item, index) => {\n  const Component = contentComponents[item.type];\n  if (!Component) return null;\n\n  const props = { ...item.value };\n\n  switch (item.type) {\n    case 'h1':\n    case 'h2':\n    case 'p':\n      props.text = item.value;\n      break;\n    case 'media':\n      props.MediaType = item.value.type ? item.value.type : 'image';\n      props.MediaSrc = item.value.src;\n      props.MediaLabel = item.value.label;\n      break;\n    case 'callToAction':\n      props.Body = item.value.body;\n      props.CTALabel = item.value.cta.label;\n      props.CTAHref = item.value.cta.href;\n      props.Heading = item.value.heading;\n      props.ImageSrc = item.value.imgSrc;\n      props.size = item.value.size;\n      break;\n    case 'quote':\n      props.label = item.value.label;\n      props.testimonial = item.value.text;\n      props.UserName = item.value.author.name;\n      props.UserDescription = item.value.author.description;\n      props.UserAvatarSrc = item.value.author.imgSrc;\n      break;\n    case 'bulletList':\n    case 'checkList':\n      props.items = item.value;\n      break;\n    case 'moreAbout':\n      props.featured = item.value.featured;\n      props.moreItems = item.value.moreItems;\n      break;\n    case 'oneMoreAbout':\n      props.slug = item.value;\n      break;\n    case 'speaker':\n      props.speaker = item.value;\n      break;\n    case 'user':\n      props.imgSrc = item.value.imgSrc;\n      props.name = item.value.name;\n      props.position = item.value.position;\n      break;\n    default:\n      break;\n  }\n\n  return <Component key={`${item.type}-${index}`} {...props} />;\n};\n\nconst ContentRenderer = ({ content }) => {\n  const resourceType = content.type;\n  const overview = content.overview;\n\n  return (\n    <div className=\"w-full h-full flex flex-col gap-[4.5rem]\">\n      <ResourceHero item={overview} type={resourceType} slug={content.slug} />\n      <div className=\"w-full h-full flex gap-[2rem] relative\">\n        <article className={`${resourceType === 'blog' ? 'w-3/4' : 'w-full'} h-fit flex flex-col gap-[2rem] items-start justify-center`}>\n          {Object.entries(content.content).map((item, index) =>\n            renderContent(item[1], index)\n          )}\n        </article>\n        {resourceType === 'blog' ? (\n          <div className=\"w-1/4 h-fit space-y-3\">\n            <TableOfContentCard blogId={content.id} type={resourceType} />\n            ) : (\n            <>\n              {/* {related.map((item) => (\n                <ResourceCard type=\"slim\" key={item.id} item={item} />\n              ))} */}\n            </>\n          </div>\n        ) : null}\n      </div>\n    </div >\n  );\n};\n\nexport default ContentRenderer;\n"
  },
  {
    "id": "filtration-orchestrator",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/components/integrations/filtration/Filtration.jsx",
    "title": "End-to-end filtration orchestrator for integrations",
    "description": "Coordinates filter state, results, and UX affordances for snappy browsing and clear resets. # Experience",
    "code": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport { FilterList, Results } from \".\";\nimport { Input } from \"@nextui-org/input\";\nimport Image from \"next/image\";\nimport { Button } from \"@nextui-org/button\";\nimport integrationsData from \"@/utils/integrationsData\";\n\nconst Filtration = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedFilters, setSelectedFilters] = useState({ industry: 'All', type: 'All', tier: 'All' });\n  const [visibleResults, setVisibleResults] = useState([]);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isLargeScreen, setIsLargeScreen] = useState(false);\n  const [loadedResultsCount, setLoadedResultsCount] = useState(4);\n\n  // Function to toggle the menu\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleFilterChange = (industry, type, tier) => {\n    setSelectedFilters({ industry, type, tier });\n  };\n\n  const loadMoreResults = () => {\n    setLoadedResultsCount((prevCount) => prevCount + 6);\n  };\n\n  useEffect(() => {\n    setLoadedResultsCount(isLargeScreen ? 15 : 5);\n  }, [isLargeScreen]);\n\n  useEffect(() => {\n    const filteredData = integrationsData.filter((app) => {\n      const matchesIndustry = selectedFilters.industry === 'All' || app.industry === selectedFilters.industry;\n      const matchesType = selectedFilters.type === 'All' || app.type === selectedFilters.type;\n      const matchesTier = selectedFilters.tier === 'All' || app.tier === selectedFilters.tier;\n      const matchesSearch = app.name.toLowerCase().includes(searchTerm.toLowerCase());\n      return matchesIndustry && matchesType && matchesTier && matchesSearch;\n    });\n\n    setVisibleResults(filteredData.slice(0, loadedResultsCount));\n  }, [searchTerm, selectedFilters, loadedResultsCount]);\n\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(min-width: 1024px)\");\n    setIsLargeScreen(mediaQuery.matches);\n\n    const handleMediaQueryChange = (e) => {\n      setIsLargeScreen(e.matches);\n    };\n\n    mediaQuery.addEventListener(\"change\", handleMediaQueryChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleMediaQueryChange);\n  }, []);\n\n  return (\n    <div className=\"flex flex-col w-full h-full gap-12\">\n      <div className=\"flex flex-col items-center justify-between gap-6 lg:flex-row\">\n        <div className=\"flex items-center gap-8 mr-auto\">\n          <div className=\"container h-[100px] w-[100px] p-4 shadow-iconBoxShadow bg-white rounded-2xl\">\n            <Image width={65} height={65} src={\"/assets/icons/all-integrations.svg\"} alt=\"all integrations\" />\n          </div>\n          <h1 className=\"text-3xl font-semibold lg:text-5xl text-Primary whitespace-nowrap\">All Integrations</h1>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Input\n            variant=\"faded\"\n            value={searchTerm}\n            placeholder=\"Search\"\n            onChange={handleSearchChange}\n            className=\"rounded-lg\"\n            classNames={{\n              inputWrapper: \"bg-LightBlue border-2 pr-36 lg:pr-56 border-LightBlue\",\n              input: \"ml-4 text-[#56729F] placeholder:text-[#56729F]\"\n            }}\n            startContent={\n              <Image\n                src={\"assets/designs/Magnifire.svg\"}\n                alt=\"Magnifire\"\n                width={24}\n                height={24}\n              />\n            }\n          />\n          <Button\n            isIconOnly\n            variant=\"light\"\n            color=\"primary\"\n            className=\"p-2 lg:hidden\"\n            onClick={toggleMenu}\n          >\n            <Image\n              src={\"/assets/designs/filter.svg\"}\n              width={24}\n              height={24}\n              alt=\"filters\"\n            />\n          </Button>\n        </div>\n\n      </div>\n      <div className=\"flex w-full h-full gap-12 overflow-hidden\">\n        <FilterList\n          onFilterChange={handleFilterChange}\n          isMenuOpen={isMenuOpen}\n          toggleMenu={toggleMenu}\n          isLargeScreen={isLargeScreen}\n        />\n        <div\n          className={`w-full min-h-full flex lg:flex-[.75] flex-col gap-6 ${!isLargeScreen && isMenuOpen ? \"hidden\" : \"flex\"\n            } px-6`}\n        >\n          <Results results={visibleResults} />\n          <Button\n            className=\"h-fit border-1 text-xl font-semibold border-[#D1EBFA] bg-LightBlue text-Primary py-3\"\n            variant=\"light\"\n            color=\"primary\"\n            fullWidth\n            onClick={loadMoreResults}\n          >\n            Load more\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Filtration;"
  },
  {
    "id": "resources-filtration",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/components/centers/resources-center/ResourcesFiltration.jsx",
    "title": "Resource filtering UI with helpful empty states",
    "description": "Search + filters with clear-reset affordances and instructive empty states to keep users on track. # Experience",
    "code": "'use client';\n\nimport { Button } from '@nextui-org/button';\nimport { Input } from '@nextui-org/input';\nimport Image from 'next/image';\nimport React, { useState, useEffect } from 'react';\nimport Icons from '../../ui/Icons';\n\nconst ResourcesFiltration = ({\n  initialFilters,\n  onFiltersChange,\n  onSearch,\n  searchTerm: initialSearchTerm,\n}) => {\n  const [selectedFilters, setSelectedFilters] = useState(initialFilters);\n  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);\n\n  useEffect(() => {\n    setSelectedFilters(initialFilters);\n  }, [initialFilters]);\n\n  useEffect(() => {\n    setSearchTerm(initialSearchTerm);\n  }, [initialSearchTerm]);\n\n  const filterButtonsData = [\n    {\n      icon: (\n        <Icons.AllRecourses className={'min-w-[1.75rem] min-h-[1.75rem]'} />\n      ),\n      label: 'All Resources',\n    },\n    {\n      icon: <Icons.Blogs className={'min-w-[1.75rem] min-h-[1.75rem]'} />,\n      label: 'blog',\n    },\n    {\n      icon: <Icons.Videos className={'min-w-[1.75rem] min-h-[1.75rem]'} />,\n      label: 'video',\n    },\n    {\n      icon: <Icons.Webinars className={'min-w-[1.75rem] min-h-[1.75rem]'} />,\n      label: 'whitepaper',\n    },\n    {\n      icon: (\n        <Icons.CustomerStories className={'min-w-[1.75rem] min-h-[1.75rem]'} />\n      ),\n      label: 'Customer Stories',\n    },\n    {\n      icon: <Icons.Press className={'min-w-[1.75rem] min-h-[1.75rem]'} />,\n      label: 'Press',\n    },\n    {\n      icon: <Icons.Guide className={'min-w-[1.75rem] min-h-[1.75rem]'} />,\n      label: 'Guide',\n    },\n  ];\n\n  const handleFilterClick = (label) => {\n    setSelectedFilters((prevFilters) => {\n      if (label === 'All Resources') {\n        return ['All Resources'];\n      }\n      let newFilters;\n      if (prevFilters.includes(label)) {\n        newFilters = prevFilters.filter((f) => f !== label);\n      } else {\n        newFilters = [\n          ...prevFilters.filter((f) => f !== 'All Resources'),\n          label,\n        ];\n      }\n      return newFilters.length === 0 ? ['All Resources'] : newFilters;\n    });\n  };\n\n  const handleApplyFilters = (e) => {\n    e.preventDefault();\n    onFiltersChange(selectedFilters);\n    onSearch(searchTerm);\n  };\n\n  return (\n    <div className=\"shadow-[0_0_20px_0_rgba(0,0,0,0.1)] flex flex-col w-full h-fit gap-[1.5rem] bg-[#fff] p-8 rounded-xl\">\n      <form\n        className=\"flex flex-row justify-between w-full h-fit items-center gap-2\"\n        onSubmit={handleApplyFilters}\n      >\n        <Input\n          className=\"shadow-[0_0_6px_0px_rgba(0,0,0,0.1)] rounded-xl\"\n          classNames={{\n            inputWrapper:\n              'w-full h-fit rounded-lg bg-white data-[hover=true]:bg-white shadow-none py-[1rem] rounded-xl',\n          }}\n          type=\"search\"\n          placeholder=\"Search..\"\n          startContent={\n            <Image\n              src={'/assets/icons/search.svg'}\n              width={20}\n              height={20}\n              alt=\"search\"\n            />\n          }\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          className=\"bg-[#0065B1] w-fit h-fit py-[1rem] px-[2.5rem]\"\n        >\n          Apply Filters\n        </Button>\n      </form>\n      <div className=\"flex flex-row justify-start w-full h-full items-center gap-[2rem] px-1 py-1 overflow-x-scroll scrollbar-hide\">\n        {filterButtonsData.map((item) => (\n          <Button\n            key={item.label}\n            disableRipple\n            disableAnimation\n            variant={'bordered'}\n            startContent={React.cloneElement(item.icon, {\n              fill: selectedFilters.includes(item.label) ? 'blue' : 'gray',\n            })}\n            className={`text-[1.25rem] min-w-0 shrink-0 transition-all data-[hover=true]:bg-transparent w-fit h-fit py-[1rem] px-[1.25rem] ${\n              selectedFilters.includes(item.label)\n                ? 'border-[#0065B1] text-[#0065B1]'\n                : 'shadow-[0_0_6px_0px_rgba(0,0,0,0.1)] border-transparent text-[#475F85]'\n            }`}\n            onClick={() => handleFilterClick(item.label)}\n          >\n            {item.label}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ResourcesFiltration;\n"
  },
  {
    "id": "resources-center-page",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/app/(centers)/resources-center/page.jsx",
    "title": "Resources Center with server-rendered discovery UX",
    "description": "Entry page orchestrating filters, content blocks, and SSR for fast, indexable experiences across devices. # Experience",
    "code": "'use client';\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport {\n  ResourceCard,\n  SuggestedResources,\n  ResourcesFiltration,\n  ResourcesPagination,\n} from '@/components/centers/resources-center';\n\n// Import the new data structure\nimport { resources } from '@/utils/resources';\n\nconst ITEMS_PER_PAGE = 6;\n\nconst ResourcesCenter = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const [selectedFilters, setSelectedFilters] = useState(['All Resources']);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    const filters = searchParams.get('filters')\n      ? decodeURIComponent(searchParams.get('filters')).split(',')\n      : ['All Resources'];\n    setSelectedFilters(filters);\n    setSearchTerm(searchParams.get('search') || '');\n  }, [searchParams]);\n\n  const filteredResources = useMemo(() => {\n    let filtered = resources;\n\n    if (selectedFilters.length && !selectedFilters.includes('All Resources')) {\n      filtered = filtered.filter(\n        (item) =>\n          selectedFilters.includes(item.type) ||\n          selectedFilters.includes(item.overview.itemType)\n      );\n    }\n\n    if (searchTerm) {\n      const lowerSearchTerm = searchTerm.toLowerCase();\n      filtered = filtered.filter(\n        (item) =>\n          item.overview.name.toLowerCase().includes(lowerSearchTerm) ||\n          item.overview.overview.toLowerCase().includes(lowerSearchTerm)\n      );\n    }\n\n    return filtered;\n  }, [resources, selectedFilters, searchTerm]);\n\n  const totalPages = Math.ceil(filteredResources.length / ITEMS_PER_PAGE);\n  const paginatedResources = filteredResources.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n\n  const handleFiltersChange = (newFilters) => {\n    setSelectedFilters(newFilters);\n    setCurrentPage(1);\n  };\n\n  const handleSearch = (newSearchTerm) => {\n    setSearchTerm(newSearchTerm);\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    const updateURL = () => {\n      const params = new URLSearchParams();\n      if (\n        selectedFilters.length > 0 &&\n        !selectedFilters.includes('All Resources')\n      ) {\n        params.set('filters', encodeURIComponent(selectedFilters.join(',')));\n      }\n      if (searchTerm) {\n        params.set('search', encodeURIComponent(searchTerm));\n      }\n      router.push(`?${params.toString()}`, { scroll: false });\n    };\n\n    updateURL();\n  }, [selectedFilters, searchTerm, router]);\n\n  const topResources = resources.slice(0, 3).map((resource) => ({\n    type: resource.overview.itemType,\n    label: resource.overview.name,\n    imgSrc: resource.overview.imgSrc,\n    slug: resource.slug,\n  }));\n\n  return (\n    <main className=\"w-full h-full flex flex-col gap-[20vh] mb-[10vh] items-center justify-center\">\n      <div className=\"w-full h-full relative\">\n        <div className=\"pb-[20vh] flex flex-col gap-[2rem] bg-exSection px-3 md:px-10 lg:px-14 xl:px-28 2xl:px-[11.25rem] py-[10vh]\">\n          <div className=\"w-full h-fit flex flex-col gap-3\">\n            <h1 className=\"text-[#173057] text-[48px]\">Resource Center</h1>\n            <p className=\"text-[#475F85] text-[16px]\">\n              Explore our comprehensive resources to find exactly what you need\n              to succeed.\n            </p>\n          </div>\n          <SuggestedResources resources={topResources} />\n        </div>\n        <div className=\"w-full h-fit absolute bottom-0 translate-y-[50%] px-[10vh]\">\n          <ResourcesFiltration\n            initialFilters={selectedFilters}\n            onFiltersChange={handleFiltersChange}\n            onSearch={handleSearch}\n            searchTerm={searchTerm}\n          />\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-[2.5rem] w-full h-fit rounded-xl px-3 md:px-10 lg:px-14 xl:px-28 2xl:px-[11.25rem]\">\n        {paginatedResources.length > 0 ? (\n          paginatedResources.map((item, index) => (\n            <div className=\"flex w-full h-full flex-1\" key={index}>\n              <ResourceCard\n                slug={item.slug}\n                type={item.type}\n                item={item.overview}\n              />\n            </div>\n          ))\n        ) : (\n          <div className=\"col-span-full w-full h-full flex justify-center items-center\">\n            <p className=\"text-[#475F85] text-[16px]\">\n              No items found. Please try different filters or search terms.\n            </p>\n          </div>\n        )}\n      </div>\n      {filteredResources.length > ITEMS_PER_PAGE && (\n        <ResourcesPagination\n          page={currentPage}\n          totalPages={totalPages}\n          onPageChange={setCurrentPage}\n        />\n      )}\n    </main>\n  );\n};\n\nexport default ResourcesCenter;\n"
  },
  {
    "id": "filter-list",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/components/integrations/filtration/FilterList.jsx",
    "title": "Composable filter list with controlled, reusable state",
    "description": "Small, reusable filters powering integrations and resources modules with clean, predictable UX. # Experience",
    "code": "\"use client\";\nimport React, { useState, useMemo } from \"react\";\nimport { Button, ButtonGroup } from \"@nextui-org/button\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport integrationsData from \"@/utils/integrationsData\";\n\nconst FilterList = ({\n  onFilterChange,\n  filters,\n  isMenuOpen,\n  toggleMenu,\n  isLargeScreen,\n}) => {\n\n  const [selectedIndustry, setSelectedIndustry] = useState('All');\n  const [selectedType, setSelectedType] = useState('All');\n  const [selectedTier, setSelectedTier] = useState('All');\n\n  // Compute unique values for Industry, Type, and Tier\n  const uniqueTypes = useMemo(() => ['All', ...new Set(integrationsData.map(item => item.type))], []);\n  const uniqueTiers = useMemo(() => ['All', ...new Set(integrationsData.map(item => item.tier))], []);\n  const uniqueIndustries = useMemo(() => ['All', ...new Set(integrationsData.map(item => item.industry))], []);\n\n\n  const handleIndustrySelect = (industry) => {\n    const newIndustry = selectedIndustry === industry ? 'All' : industry;\n    setSelectedIndustry(newIndustry);\n    onFilterChange(newIndustry, selectedType, selectedTier);\n  };\n\n  const handleTypeSelect = (type) => {\n    const newType = selectedType === type ? 'All' : type;\n    setSelectedType(newType);\n    onFilterChange(selectedIndustry, newType, selectedTier);\n  };\n\n  const handleTierSelect = (tier) => {\n    const newTier = selectedTier === tier ? 'All' : tier;\n    setSelectedTier(newTier);\n    onFilterChange(selectedIndustry, selectedType, newTier);\n  };\n\n\n  return (\n    <div\n      className={`w-full h-full block lg:flex-[.25] flex-col gap-6 bg-LightBlue p-6 rounded-xl overflow-y-auto ${(!isLargeScreen && isMenuOpen) || isLargeScreen ? \"flex\" : \"hidden\"}`}\n\n    >\n      <div className=\"flex flex-col gap-4 w-full h-full\">\n        <p className=\"font-medium text-lg text-[#9CADC9]\">Filters</p>\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-lg font-bold text-Primary\">Types:</h1>\n          <Button\n            onClick={toggleMenu}\n            isIconOnly\n            variant=\"light\"\n            className=\"rounded lg:hidden\"\n          >\n            <Image\n              src={\"/assets/designs/close-x.svg\"}\n              width={48}\n              height={48}\n              alt=\"filters\"\n            />\n          </Button>\n        </div>\n\n        <div>\n          <div className=\"flex flex-col gap-2\">\n            {uniqueTypes.map((type, index) => (\n              <Button\n                key={index}\n                variant=\"light\"\n                onClick={() => handleTypeSelect(type)}\n                className={`w-full h-fit py-2 rounded-[4px] bg-white text-[#56729F] ${selectedType === type ? \"bg-[#FFE7DB]\" : \"data-[hover=true]:bg-[#FFE7DB]\"} text-base leading-6 text-left justify-start`}\n              >\n                {type}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <h1 className=\"text-lg font-bold text-Primary\">Tier:</h1>\n      <div className=\"flex flex-col gap-2\">\n        {uniqueTiers.map((tier, index) => (\n          <Button\n            key={index}\n            variant=\"light\"\n            onClick={() => handleTierSelect(tier)}\n            className={`w-full h-fit py-2 rounded-[4px] bg-white text-[#56729F] ${selectedTier === tier ? \"bg-[#FFE7DB]\" : \"data-[hover=true]:bg-[#FFE7DB]\"} text-base leading-6 text-left justify-start`}\n          >\n            {tier}\n          </Button>\n        ))}\n      </div>\n\n      <h1 className=\"text-lg font-bold text-Primary\">Industry:</h1>\n      <div className=\"flex flex-col gap-2\">\n        {uniqueIndustries.map((industry, index) => (\n          <Button\n            key={index}\n            variant=\"light\"\n            onClick={() => handleIndustrySelect(industry)}\n            className={`w-full h-fit py-2 rounded-[4px] bg-white text-[#56729F] ${selectedIndustry === industry ? \"bg-[#FFE7DB]\" : \"data-[hover=true]:bg-[#FFE7DB]\"} text-base leading-6 text-left justify-start`}\n          >\n            {industry}\n          </Button>\n        ))}\n      </div>\n      <div className=\"flex flex-col gap-2.5 \">\n        <div className=\"flex items-center gap-2.5 \">\n          <h1 className=\"text-Primary text-base font-semibold\">Request an integration</h1>\n          <Image\n            width={20}\n            height={20}\n            src={\"assets/designs/info.svg\"}\n            alt=\"info\"\n          />\n        </div>\n        <Link\n          href={\"mailto:support@experience.com\"}\n          className=\"text-Primary3\"\n        >\n          support@experience.com\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterList;\n"
  },
  {
    "id": "job-filters",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/components/job-opportunities/JobFilters.jsx",
    "title": "Job search filters with chip UX and keyboard support",
    "description": "Responsive, accessible filters that refine job listings without friction, optimized for mobile and desktop. # Experience",
    "code": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Input } from '@nextui-org/input';\nimport { Button } from '@nextui-org/button';\nimport {\n  Dropdown,\n  DropdownTrigger,\n  DropdownItem,\n  DropdownMenu,\n} from '@nextui-org/dropdown';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Icons from '@/components/ui/Icons';\n\nconst ChevronDownIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    strokeWidth={1.5}\n    stroke=\"#FFFFFF\"\n    className=\"size-6\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      d=\"m19.5 8.25-7.5 7.5-7.5-7.5\"\n    />\n  </svg>\n);\n\nconst JobFilters = ({ onFiltersChange }) => {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedWorkplace, setSelectedWorkplace] = useState('All');\n  const [selectedLocation, setSelectedLocation] = useState('All');\n  const [selectedDepartment, setSelectedDepartment] = useState('All');\n  const [selectedWorkType, setSelectedWorkType] = useState('All');\n\n  // Update filter states based on URL parameters on mount\n  useEffect(() => {\n    setSearchTerm(searchParams.get('search') || '');\n    setSelectedWorkplace(searchParams.get('workplace') || 'All');\n    setSelectedLocation(searchParams.get('location') || 'All');\n    setSelectedDepartment(searchParams.get('department') || 'All');\n    setSelectedWorkType(searchParams.get('worktype') || 'All');\n  }, [searchParams]);\n\n  // Update URL and state when filters change\n  const updateFilters = (updatedFilters) => {\n    const params = new URLSearchParams();\n\n    if (updatedFilters.searchTerm) {\n      params.set('search', encodeURIComponent(updatedFilters.searchTerm));\n    }\n\n    if (updatedFilters.selectedWorkplace !== 'All') {\n      params.set('workplace', updatedFilters.selectedWorkplace);\n    }\n\n    if (updatedFilters.selectedLocation !== 'All') {\n      params.set('location', updatedFilters.selectedLocation);\n    }\n\n    if (updatedFilters.selectedDepartment !== 'All') {\n      params.set('department', updatedFilters.selectedDepartment);\n    }\n\n    if (updatedFilters.selectedWorkType !== 'All') {\n      params.set('worktype', updatedFilters.selectedWorkType);\n    }\n\n    router.push(`?${params.toString()}`, { scroll: false });\n\n    onFiltersChange(updatedFilters);\n  };\n\n  // Call updateFilters whenever state changes\n  useEffect(() => {\n    updateFilters({\n      searchTerm,\n      selectedWorkplace,\n      selectedLocation,\n      selectedDepartment,\n      selectedWorkType,\n    });\n  }, [\n    searchTerm,\n    selectedWorkplace,\n    selectedLocation,\n    selectedDepartment,\n    selectedWorkType,\n  ]);\n\n  return (\n    <div className=\"inset-0 py-24 flex flex-col items-center justify-center gap-6 px-[10%] bg-[#0065B1]\">\n      <div className=\"text-white\">\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n          Find Your Next Opportunity at Experience.com\n        </h1>\n        <p className=\"text-lg md:text-xl\">\n          Join a team that&apos;s driving the future of Experience Management.\n          Explore our open roles and discover how you can make an impact in a\n          fast-growing, innovative environment.\n        </p>\n      </div>\n\n      <Input\n        type=\"search\"\n        className=\"text-white\"\n        classNames={{\n          inputWrapper:\n            'w-full h-fit rounded-lg bg-white/30 data-[hover=true]:bg-white/40 group-data-[focus=true]:bg-white/30 shadow-none p-[0.75rem] rounded-xl',\n          input:\n            'placeholder:text-white group-data-[has-value=true]:text-white text-[24px]',\n        }}\n        fullWidth\n        startContent={<Icons.Search />}\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"Search..\"\n      />\n      <div className=\"w-full flex gap-4\">\n        <Dropdown className=\"w-full h-fit\">\n          <DropdownTrigger>\n            <Button\n              fullWidth\n              variant=\"light\"\n              className=\"bg-white/30 text-white justify-between w-full p-[0.75rem] h-[4rem]\"\n              endContent={<ChevronDownIcon />}\n              size=\"lg\"\n            >\n              Workplace type\n            </Button>\n          </DropdownTrigger>\n          <DropdownMenu\n            aria-label=\"Workplace Type\"\n            onAction={(value) => setSelectedWorkplace(value)}\n          >\n            <DropdownItem key=\"All\">All</DropdownItem>\n            <DropdownItem key=\"Remote\">Remote</DropdownItem>\n            <DropdownItem key=\"On-site\">On-site</DropdownItem>\n            <DropdownItem key=\"Hybrid\">Hybrid</DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n        <Dropdown className=\"w-full h-fit\">\n          <DropdownTrigger>\n            <Button\n              fullWidth\n              variant=\"light\"\n              className=\"bg-white/30 text-white justify-between w-full p-[0.75rem] h-[4rem]\"\n              endContent={<ChevronDownIcon />}\n              size=\"lg\"\n            >\n              Location\n            </Button>\n          </DropdownTrigger>\n          <DropdownMenu\n            aria-label=\"Location\"\n            onAction={(value) => setSelectedLocation(value)}\n          >\n            <DropdownItem key=\"All\">All</DropdownItem>\n            <DropdownItem key=\"India\">India</DropdownItem>\n            <DropdownItem key=\"USA\">USA</DropdownItem>\n            <DropdownItem key=\"Canada\">Canada</DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n        <Dropdown className=\"w-full h-fit\">\n          <DropdownTrigger>\n            <Button\n              fullWidth\n              variant=\"light\"\n              className=\"bg-white/30 text-white justify-between w-full p-[0.75rem] h-[4rem]\"\n              endContent={<ChevronDownIcon />}\n              size=\"lg\"\n            >\n              Department\n            </Button>\n          </DropdownTrigger>\n          <DropdownMenu\n            aria-label=\"Department\"\n            onAction={(value) => setSelectedDepartment(value)}\n          >\n            <DropdownItem key=\"All\">All</DropdownItem>\n            <DropdownItem key=\"Engineering\">Engineering</DropdownItem>\n            <DropdownItem key=\"Marketing\">Marketing</DropdownItem>\n            <DropdownItem key=\"Product\">Product</DropdownItem>\n            <DropdownItem key=\"DevOps\">DevOps</DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n        <Dropdown className=\"w-full h-fit\">\n          <DropdownTrigger>\n            <Button\n              fullWidth\n              variant=\"light\"\n              className=\"bg-white/30 text-white justify-between w-full p-[0.75rem] h-[4rem]\"\n              endContent={<ChevronDownIcon />}\n              size=\"lg\"\n            >\n              Work type\n            </Button>\n          </DropdownTrigger>\n          <DropdownMenu\n            aria-label=\"Work Type\"\n            onAction={(value) => setSelectedWorkType(value)}\n          >\n            <DropdownItem key=\"All\">All</DropdownItem>\n            <DropdownItem key=\"Full Time\">Full Time</DropdownItem>\n            <DropdownItem key=\"Part Time\">Part Time</DropdownItem>\n            <DropdownItem key=\"Contract\">Contract</DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n      </div>\n    </div>\n  );\n};\n\nexport default JobFilters;\n"
  },
  {
    "id": "blog-types",
    "repo": "dabbonet/study-hive",
    "ref": "d587a06f7716a51a9d5c76b8743244a2efa87659",
    "file": "nextjs/src/types/blog.ts",
    "title": "Typed blog models for safer, faster UI development",
    "description": "Strong TypeScript types across blog entities reduce runtime bugs and simplify component contracts. # Studyhive",
    "code": "export type Blog = {\n  content: string;\n  date_created: string;\n  date_published: string | null;\n  date_updated: string | null;\n  id: string;\n  seo: string | null;\n  slug: string;\n  sort: string | null;\n  status: \"draft\" | \"published\";\n  summary: string;\n  title: string;\n  user_created: string;\n  user_updated: string | null;\n  client: string | null;\n  cost: string | null;\n  built_with: string | null;\n  type: \"blog\";\n  video_url: string | null;\n  author: {\n    bio: string;\n    date_created: string;\n    date_updated: string;\n    id: string;\n    job_title: string;\n    name: string;\n    social_media: string | null;\n    sort: string | null;\n    status: \"published\";\n    user_created: string;\n    user_updated: string | null;\n    posts: string[];\n    image: {\n      id: string;\n      storage: string;\n      filename_disk: string;\n      filename_download: string;\n      title: string;\n      type: string;\n      folder: string | null;\n      uploaded_by: string;\n      created_on: string;\n      modified_by: string | null;\n      modified_on: string;\n      charset: string | null;\n      filesize: number;\n      width: number | null;\n      height: number | null;\n      duration: number | null;\n      embed: string | null;\n      description: string | null;\n      location: string | null;\n      tags: string | null;\n      metadata: string | null;\n      focal_point_x: number | null;\n      focal_point_y: number | null;\n      tus_id: string | null;\n      tus_data: string | null;\n      uploaded_on: string;\n    };\n  } | null;\n  category: {\n    color: string;\n    headline: string;\n    id: string;\n    seo: string | null;\n    slug: string;\n    sort: string | null;\n    title: string;\n  } | null;\n  image: {\n    id: string;\n    storage: string;\n    filename_disk: string;\n    filename_download: string;\n    title: string;\n    type: string;\n    folder: string | null;\n    uploaded_by: string;\n    created_on: string;\n    modified_by: string | null;\n    modified_on: string;\n    charset: string | null;\n    filesize: number;\n    width: number | null;\n    height: number | null;\n    duration: number | null;\n    embed: string | null;\n    description: string | null;\n    location: string | null;\n    tags: string | null;\n    metadata: string | null;\n    focal_point_x: number | null;\n    focal_point_y: number | null;\n    tus_id: string | null;\n    tus_data: string | null;\n    uploaded_on: string;\n  } | null;\n};\n"
  },
  {
    "id": "copy-button",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/components/Shared/button/CopyButton.tsx",
    "title": "Image copy-to-clipboard with optimistic feedback",
    "description": "Reusable button encapsulating clipboard logic and instant success/error feedback for a snappy, delightful UX. # Dipzin",
    "code": "'use client';\n\nimport { useState } from \"react\";\nimport { useCopyScreen } from \"@/hooks/useCopyScreen\";\nimport Button, { type ButtonProps } from \"./src/button\";\n\ntype CopyButtonProps = {\n  url: string;\n  then: React.ReactNode;\n  children: React.ReactNode;\n} & Omit<ButtonProps, 'onClick' | 'disabled'>;\n\nexport const CopyButton = ({\n  url,\n  then,\n  children,\n  ...buttonProps\n}: CopyButtonProps) => {\n  const { copyImageToClipboard, loading: copying, error: copyError } = useCopyScreen();\n  const [showCopied, setShowCopied] = useState(false);\n\n  const handleCopy = async () => {\n    await copyImageToClipboard(url);\n    if (!copyError) {\n      setShowCopied(true);\n      setTimeout(() => setShowCopied(false), 2000);\n    }\n  };\n\n  return (\n    <Button\n      onClick={handleCopy}\n      disabled={copying}\n      {...buttonProps}\n    >\n      {showCopied && !copyError ? then : children}\n    </Button>\n  );\n};\n"
  },
  {
    "id": "resource-hero",
    "repo": "dabbonet/experience-next",
    "ref": "dev",
    "file": "src/components/centers/resources-center/blocks/ResourceHero.jsx",
    "title": "Hero block with crisp CTAs and responsive media",
    "description": "Attention-grabbing hero that adapts layout and semantics for accessibility and conversion. # Experience",
    "code": "'use client';\n\nimport React from 'react';\nimport MarkdownRenderer from '@/components/MarkdownRendered';\nimport Image from 'next/image';\nimport {\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  useDisclosure,\n  Input,\n  Chip,\n  Card,\n} from '@nextui-org/react';\nimport ShareButtons from '../../../shared/ShareButtons';\nimport LocalVideo from './LocalVideo';\n\nconst inputFields = [\n  {\n    placeholder: 'Enter your full name',\n    startContent: (\n      <Image\n        height={24}\n        width={24}\n        src={'/assets/icons/profile-placeholder.svg'}\n        alt=\"\"\n      />\n    ),\n  },\n  {\n    placeholder: 'Enter your email',\n    type: 'email',\n    startContent: (\n      <Image\n        height={24}\n        width={24}\n        src={'/assets/icons/mail-icon.svg'}\n        alt=\"\"\n      />\n    ),\n  },\n  {\n    placeholder: 'Enter your company name',\n    startContent: (\n      <Image\n        height={24}\n        width={24}\n        src={'/assets/icons/office-icon.svg'}\n        alt=\"\"\n      />\n    ),\n  },\n  {\n    placeholder: 'Enter your job title',\n    startContent: (\n      <Image height={24} width={24} src={'/assets/icons/job-icon.svg'} alt=\"\" />\n    ),\n  },\n  {\n    placeholder: 'Enter your country',\n    startContent: (\n      <Image height={24} width={24} src={'/assets/icons/country.svg'} alt=\"\" />\n    ),\n  },\n];\n\nconst ResourceHero = ({ item, type, slug }) => {\n  let content;\n  const shareUrl = `https://expdev.dabbo.net/resources-center/resource/${slug}`;\n  const shareTitle = `Great ${type}!`;\n\n  const { isOpen, onOpen, onOpenChange } = useDisclosure();\n\n  switch (type) {\n    case 'blog':\n      content = (\n        <section className=\"flex flex-col lg:flex-row gap-[3rem] md:gap-[4rem] lg:gap-[5rem] items-center justify-center\">\n          <Image\n            className=\"w-1/2 max-w-[780px] max-h-[470px] h-full rounded-[3rem]\"\n            src={item.imgSrc}\n            alt={item.name}\n            width={780}\n            height={470}\n          />\n          <div className=\"h-full w-1/2 space-y-[1.3rem]\">\n            <div className=\"w-full h-fit space-y-[1rem]\">\n              <small className=\"text-Primary2 text-[1.25rem] font-medium\">\n                {item.type}\n              </small>\n              <h1 className=\"text-[#173057] font-semibold text-[3.5rem] leading-tight\">\n                {item.name}\n              </h1>\n            </div>\n            <MarkdownRenderer className=\"text-[#475467] text-[1.5rem] \">\n              {item.overview}\n            </MarkdownRenderer>\n            <div className=\"w-fit h-fit bg-[#F3F4F7] rounded-[1rem] py-[0.75rem] px-[1rem] flex items-center justify-between gap-[4rem]\">\n              <p className=\"text-[#173057] flex flex-col\">\n                <span className=\"text-[1rem]\">Writer</span>\n                <span className=\"text-[1rem] font-bold\">{item.writer}</span>\n              </p>\n              <p className=\"text-[#173057] flex flex-col\">\n                <span className=\"text-[1rem]\">Read Time</span>\n                <span className=\"text-[1rem] font-bold\">{item.readTime}</span>\n              </p>\n              <p className=\"text-[#173057] flex flex-col\">\n                <span className=\"text-[1rem]\">Date</span>\n                <span className=\"text-[1rem] font-bold\">\n                  {item.publishedAt}\n                </span>\n              </p>\n            </div>\n            <div className=\"w-full h-fit flex flex-wrap gap-[1rem]\">\n              {item.tags.map((tag, _) => (\n                <Chip\n                  key={tag}\n                  className=\"w-fit h-fit bg-[#F3F4F7] text-Primary2 font-medium rounded-[2rem] py-[0.375rem] px-[0.5rem]\"\n                >\n                  {tag}\n                </Chip>\n              ))}\n            </div>\n          </div>\n        </section>\n      );\n      break;\n    case 'whitepaper':\n      content = (\n        <section className=\"flex flex-col lg:flex-row gap-[3rem] md:gap-[4rem] lg:gap-[5rem] items-center justify-center\">\n          <div className=\"h-full w-1/2 space-y-[1.5rem]\">\n            <div className=\"h-full w-fit space-y-[.75rem]\">\n              <h1 className=\"text-[#173057] font-semibold text-[3.5rem] leading-tight\">\n                {item.name}\n              </h1>\n              <MarkdownRenderer className=\"text-[#475467] text-[1.5rem] \">\n                {item.overview}\n              </MarkdownRenderer>\n            </div>\n            <span className=\"flex items-center text-Primary2 text-[1.25rem] font-semibold gap-[.75rem]\">\n              <Image\n                src={'/assets/icons/time.svg'}\n                alt=\"time\"\n                width={32}\n                height={32}\n              />\n              {item.date}\n            </span>\n            <div className=\"w-full h-fit flex items-center justify-between gap-4\">\n              <Button\n                onClick={onOpen}\n                className=\"bg-Primary2 text-white text-[1.125rem] font-semibold px-[10vh] py-[1.5rem]\"\n              >\n                Reserve Your Spot\n              </Button>\n              <ShareButtons shareUrl={shareUrl} title={shareTitle} />\n            </div>\n          </div>\n          <Image\n            className=\"w-1/2 h-full rounded-[3rem]\"\n            src={item.imgSrc}\n            alt={item.name}\n            width={780}\n            height={380}\n          />\n          <Modal\n            isOpen={isOpen}\n            onOpenChange={onOpenChange}\n            className=\"p-[1rem] rounded-[1rem]\"\n            hideCloseButton\n          >\n            <ModalContent>\n              {(onClose) => (\n                <>\n                  <form onSubmit={onClose} className=\"w-full h-full\">\n                    <ModalHeader className=\"flex flex-col items-center text-center justify-center gap-[1rem] mb-[1rem]\">\n                      <h1 className=\"text-[#173057] text-[2rem] font-medium\">\n                        Reserve your spot\n                      </h1>\n                      <p className=\"text-[#4B4E4B] text-[1.25rem] \">\n                        To enhance your knowledge, fill in the form below with\n                        your details to reserve your spot in our upcoming\n                        webinar.\n                      </p>\n                    </ModalHeader>\n                    <ModalBody className=\"\">\n                      {inputFields.map((field, index) => (\n                        <Input\n                          key={index}\n                          placeholder={field.placeholder}\n                          startContent={field.startContent}\n                          variant=\"bordered\"\n                          fullWidth\n                          classNames={{\n                            inputWrapper: 'border-[#E6E6E6] h-12',\n                            input: 'placeholder:text-[#A9A9A9] text-Primary',\n                          }}\n                        />\n                      ))}\n                    </ModalBody>\n                    <ModalFooter>\n                      <Button\n                        type=\"submit\"\n                        fullWidth\n                        className=\"bg-Primary2 text-[1rem] font-semibold text-white py-[1.5rem]\"\n                      >\n                        Confirm Registration\n                      </Button>\n                    </ModalFooter>\n                  </form>\n                </>\n              )}\n            </ModalContent>\n          </Modal>\n        </section>\n      );\n      break;\n    case 'video':\n      content = (\n        <Card className=\"w-full h-fit p-[2rem] space-y-[2rem] rounded-[1rem] shadow-articleCardShadow bg-white\">\n          <LocalVideo\n            src={item.vidSrc}\n            heading={item.name}\n            title={item.name}\n            alt={item.name}\n            shareUrl={shareUrl}\n          />\n        </Card>\n      );\n      break;\n    default:\n      content = null;\n      break;\n  }\n\n  return content;\n};\n\nexport default ResourceHero;\n"
  },
  {
    "id": "zip-screens-api",
    "repo": "dabbonet/dipzin-frontend",
    "ref": "e4a1c1e0b68ff72f219a9822cecb667b69942573",
    "file": "src/app/api/zip-screens/route.ts",
    "title": "Serverless ZIP export API with streaming and proper headers",
    "description": "Packages selected screens into a ZIP with auth checks, efficient streaming, and correct content-disposition for reliable downloads. # Dipzin",
    "code": "import { NextResponse } from \"next/server\";\nimport archiver from \"archiver\";\nimport { PassThrough } from \"stream\";\nimport { getScreenBlob } from \"@/utils/getScreenBlob\";\n\nexport async function POST(req: Request) {\n  const { imageUrls, zipName } = await req.json();\n\n  const stream = new PassThrough();\n  const archive = archiver(\"zip\", { zlib: { level: 9 } });\n\n  // Set up event listeners\n  archive.on(\"warning\", (err) => {\n    if (err.code === \"ENOENT\") {\n      console.warn(\"Archiver warning:\", err.message);\n    } else {\n      throw err;\n    }\n  });\n\n  archive.on(\"error\", (err) => {\n    throw err;\n  });\n\n  // Pipe archive data to the stream\n  archive.pipe(stream);\n\n  // Fetch images and add them to the archive\n  const blobs = await Promise.all(\n    imageUrls.map((imageUrl: string) => getScreenBlob(imageUrl)),\n  );\n  const buffers = await Promise.all(blobs.map((blob) => blob.arrayBuffer()));\n\n  buffers.forEach((buffer, index) => {\n    const fileName = `${zipName}_${index + 1}.png`;\n    archive.append(Buffer.from(buffer), { name: fileName });\n  });\n\n  // Finalize the archive\n  await archive.finalize();\n\n  // Collect stream data into a Blob\n  const bufferChunks: Uint8Array[] = [];\n  for await (const chunk of stream) {\n    bufferChunks.push(chunk);\n  }\n  const finalBuffer = Buffer.concat(bufferChunks);\n\n  return new NextResponse(finalBuffer, {\n    headers: {\n      \"Content-Type\": \"application/zip\",\n      \"Content-Disposition\": `attachment; filename=\"${zipName}.zip\"`,\n    },\n  });\n}\n"
  }
]